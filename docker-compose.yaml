version: "3.7"

services:
  multi-validator1-node:
    build:
      context: .
      dockerfile: chain/Dockerfile
    image: band-validator:latest
  init1:
    image: odinprotocol/core:latest
    container_name: init1
    command: ./init-scripts/init.sh validator1
    volumes:
      - ./init-scripts:/init-scripts
      - ./init.sh:/init.sh
      - vol1:/root/.odind
      - ./genesis.json:/genesis.json

  init2:
    image: odinprotocol/core:latest
    container_name: init2
    depends_on:
      - init1
    command: ./init-scripts/init.sh validator2
    volumes:
      - ./init-scripts:/init-scripts
      - ./init.sh:/init.sh
      - vol2:/root/.odind
      - ./genesis.json:/genesis.json

  init3:
    image: odinprotocol/core:latest
    container_name: init3
    depends_on:
      - init2
    command: ./init-scripts/init.sh validator3
    volumes:
      - ./init-scripts:/init-scripts
      - vol3:/root/.odind
      - ./genesis.json:/genesis.json

  init4:
    image: odinprotocol/core:latest
    container_name: init4
    depends_on:
      - init3
    command: ./init.sh validator4 && ./run.sh
    volumes:
      - ./run.sh:/run.sh
      - ./init-scripts:/init-scripts
      - vol4:/root/.odind
      - ./genesis.json:/genesis.json

  validator1:
    image: odinprotocol/core:latest
    container_name: validator1
    depends_on:
      - init4
    networks:
      bandchain:
      default:
        ipv4_address: 172.18.0.11
    command: sh -c "chmod +x ./run.sh && ./run.sh validator1"
    command: odind start --rpc.laddr tcp://0.0.0.0:26657 --p2p.persistent_peers 11392b605378063b1c505c0ab123f04bd710d7d7@172.18.0.11:26656,0851086afcd835d5a6fb0ffbf96fcdf74fec742e@172.18.0.12:26656,63808bd64f2ec19acb2a494c8ce8467c595f6fba@172.18.0.14:26656,7b58b086dd915a79836eb8bfa956aeb9488d13b0@172.18.0.13:26656
    volumes:
      - vol1:/root/.odind

  multi-validator2-node:
    image: band-validator:latest
  validator2:
    container_name: validator2
    image: odinprotocol/core:latest
    depends_on:
      - validator1
    networks:
      bandchain:
      default:
        ipv4_address: 172.18.0.12
    command: sh -c "chmod +x ./run.sh && ./run.sh validator2"
    command: odind start --rpc.laddr tcp://0.0.0.0:26657 --p2p.persistent_peers 11392b605378063b1c505c0ab123f04bd710d7d7@172.18.0.11:26656,0851086afcd835d5a6fb0ffbf96fcdf74fec742e@172.18.0.12:26656,63808bd64f2ec19acb2a494c8ce8467c595f6fba@172.18.0.14:26656,7b58b086dd915a79836eb8bfa956aeb9488d13b0@172.18.0.13:26656
    volumes:
      - vol2:/root/.odind

  multi-validator3-node:
    image: band-validator:latest
  validator3:
    container_name: validator3
    image: odinprotocol/core:latest
    depends_on:
      - validator2
    networks:
      bandchain:
      default:
        ipv4_address: 172.18.0.13
    command: sh -c "chmod +x ./run.sh && ./run.sh validator3"
    command: odind start --rpc.laddr tcp://0.0.0.0:26657 --p2p.persistent_peers 11392b605378063b1c505c0ab123f04bd710d7d7@172.18.0.11:26656,0851086afcd835d5a6fb0ffbf96fcdf74fec742e@172.18.0.12:26656,63808bd64f2ec19acb2a494c8ce8467c595f6fba@172.18.0.14:26656,7b58b086dd915a79836eb8bfa956aeb9488d13b0@172.18.0.13:26656
    volumes:
      - vol3:/root/.odind

  multi-validator4-node:
    image: band-validator:latest
  validator4:
    container_name: validator4
    image: odinprotocol/core:latest
    depends_on:
      - validator3
    networks:
      bandchain:
      default:
        ipv4_address: 172.18.0.14
    command: sh -c "chmod +x ./run.sh && ./run.sh validator4"

  emitter-node:
    image: band-validator:latest
    networks:
      bandchain:
    command: sh -c "chmod +x ./run.sh && ./run.sh emitter"

  query-node:
    image: band-validator:latest
    command: odind start --rpc.laddr tcp://0.0.0.0:26657 --p2p.persistent_peers 11392b605378063b1c505c0ab123f04bd710d7d7@172.18.0.11:26656,0851086afcd835d5a6fb0ffbf96fcdf74fec742e@172.18.0.12:26656,63808bd64f2ec19acb2a494c8ce8467c595f6fba@172.18.0.14:26656,7b58b086dd915a79836eb8bfa956aeb9488d13b0@172.18.0.13:26656
    ports:
      - 26657:26657
    networks:
      bandchain:
        ipv4_address: 172.18.0.15
    command: sh -c "chmod +x ./run.sh && ./run.sh query-node"
      - 26655:26656
    volumes:
      - vol4:/root/.odind

  rest-server:
    image: band-validator:latest
    image: odinprotocol/core:latest
    networks:
      bandchain:
      default:
        ipv4_address: 172.18.0.20
    restart: always
    depends_on:
      - validator4
    ports:
      - 1317:1317
    command: bandcli rest-server --laddr tcp://0.0.0.0:1317 --node tcp://172.18.0.15:26657 --chain-id bandchain --trust-node
    command: bandcli rest-server --laddr tcp://0.0.0.0:1317 --node tcp://172.18.0.14:26657 --chain-id odin --trust-node

  proxy-server:
    build:
      context: scan/proxy
    image: proxy-server:latest
  geo-provider:
    image: odinprotocol/geo-provider:latest
    networks:
      bandchain:
        ipv4_address: 172.18.0.99
    depends_on:
      - rest-server
    ports:
      - 80:80

  postgres:
    image: postgres:12
      default:
        ipv4_address: 172.18.0.21
    restart: always
    networks:
      bandchain:
        ipv4_address: 172.18.0.88
    environment:
      POSTGRES_PASSWORD: postgrespassword

  graphql-engine:
    image: hasura/graphql-engine:v1.1.0
    volumes:
      - ./data:/go/app/data
    ports:
      - "5433:5433"
    depends_on:
      - "postgres"
    restart: always
    networks:
      bandchain:
        ipv4_address: 172.18.0.89
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@172.18.0.88:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_SERVER_HOST: 0.0.0.0
      HASURA_GRAPHQL_SERVER_PORT: 5433
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "true"
        - 5000:80
    command: geo-provider

  # TODO: Expose port to consume kafka from other
  zookeeper:
    image: wurstmeister/zookeeper
    # ports:
    #   - "2181:2181"
    networks:
      bandchain:
        ipv4_address: 172.18.0.30
  kafka:
    image: wurstmeister/kafka
    # ports:
    #   - "9092:9092"
    networks:
      bandchain:
        ipv4_address: 172.18.0.31
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.18.0.31
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: test:1:1
      KAFKA_ZOOKEEPER_CONNECT: 172.18.0.30:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
volumes:
  vol1:
  vol2:
  vol3:
  vol4:

  flusher-init:
    build:
      context: flusher
    image: bandchain_flusher:latest
    networks:
      bandchain:
    command: sh -c "sleep 30 && python main.py init bandchain test --db postgres:postgrespassword@172.18.0.88:5432/postgres"

  flusher-daemon:
    image: bandchain_flusher:latest
    networks:
      bandchain:
    restart: always

networks:
  bandchain:
  default:
    ipam:
      driver: default
      config:
        - subnet: "172.18.0.0/16"
