// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: odincore/odinmint/tx.proto

package odinmint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_WithdrawCoinsToAccFromTreasury_FullMethodName = "/odincore.odinmint.Msg/WithdrawCoinsToAccFromTreasury"
	Msg_MintCoins_FullMethodName                      = "/odincore.odinmint.Msg/MintCoins"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// WithdrawCoinsToAccFromTreasury defines a method for withdrawing from mint
	// module.
	WithdrawCoinsToAccFromTreasury(ctx context.Context, in *MsgWithdrawCoinsToAccFromTreasury, opts ...grpc.CallOption) (*MsgWithdrawCoinsToAccFromTreasuryResponse, error)
	// MintCoins defines a method for minting from mint module.
	MintCoins(ctx context.Context, in *MsgMintCoins, opts ...grpc.CallOption) (*MsgMintCoinsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) WithdrawCoinsToAccFromTreasury(ctx context.Context, in *MsgWithdrawCoinsToAccFromTreasury, opts ...grpc.CallOption) (*MsgWithdrawCoinsToAccFromTreasuryResponse, error) {
	out := new(MsgWithdrawCoinsToAccFromTreasuryResponse)
	err := c.cc.Invoke(ctx, Msg_WithdrawCoinsToAccFromTreasury_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintCoins(ctx context.Context, in *MsgMintCoins, opts ...grpc.CallOption) (*MsgMintCoinsResponse, error) {
	out := new(MsgMintCoinsResponse)
	err := c.cc.Invoke(ctx, Msg_MintCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// WithdrawCoinsToAccFromTreasury defines a method for withdrawing from mint
	// module.
	WithdrawCoinsToAccFromTreasury(context.Context, *MsgWithdrawCoinsToAccFromTreasury) (*MsgWithdrawCoinsToAccFromTreasuryResponse, error)
	// MintCoins defines a method for minting from mint module.
	MintCoins(context.Context, *MsgMintCoins) (*MsgMintCoinsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) WithdrawCoinsToAccFromTreasury(context.Context, *MsgWithdrawCoinsToAccFromTreasury) (*MsgWithdrawCoinsToAccFromTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawCoinsToAccFromTreasury not implemented")
}
func (UnimplementedMsgServer) MintCoins(context.Context, *MsgMintCoins) (*MsgMintCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintCoins not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_WithdrawCoinsToAccFromTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawCoinsToAccFromTreasury)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawCoinsToAccFromTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_WithdrawCoinsToAccFromTreasury_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawCoinsToAccFromTreasury(ctx, req.(*MsgWithdrawCoinsToAccFromTreasury))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintCoins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MintCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintCoins(ctx, req.(*MsgMintCoins))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odincore.odinmint.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WithdrawCoinsToAccFromTreasury",
			Handler:    _Msg_WithdrawCoinsToAccFromTreasury_Handler,
		},
		{
			MethodName: "MintCoins",
			Handler:    _Msg_MintCoins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odincore/odinmint/tx.proto",
}
