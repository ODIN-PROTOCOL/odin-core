// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package odinmint

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var _ protoreflect.List = (*_Params_7_list)(nil)

type _Params_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Params_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Params_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.Map = (*_Params_8_map)(nil)

type _Params_8_map struct {
	m *map[string]string
}

func (x *_Params_8_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_Params_8_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfString(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_Params_8_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_Params_8_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_Params_8_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfString(v)
}

func (x *_Params_8_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_Params_8_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_Params_8_map) NewValue() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_8_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.List = (*_Params_10_list)(nil)

type _Params_10_list struct {
	list *[]string
}

func (x *_Params_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Params_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_10_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field EligibleAccountsPool as it is not of Message kind"))
}

func (x *_Params_10_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_10_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_11_list)(nil)

type _Params_11_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Params_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Params_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_11_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_11_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_11_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_11_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_12_list)(nil)

type _Params_12_list struct {
	list *[]*AllowedDenom
}

func (x *_Params_12_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_12_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_12_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AllowedDenom)
	(*x.list)[i] = concreteValue
}

func (x *_Params_12_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AllowedDenom)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_12_list) AppendMutable() protoreflect.Value {
	v := new(AllowedDenom)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_12_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_12_list) NewElement() protoreflect.Value {
	v := new(AllowedDenom)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_12_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_13_list)(nil)

type _Params_13_list struct {
	list *[]string
}

func (x *_Params_13_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_13_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Params_13_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_13_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_13_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field AllowedMinter as it is not of Message kind"))
}

func (x *_Params_13_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_13_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_13_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                         protoreflect.MessageDescriptor
	fd_Params_mint_denom              protoreflect.FieldDescriptor
	fd_Params_inflation_rate_change   protoreflect.FieldDescriptor
	fd_Params_inflation_max           protoreflect.FieldDescriptor
	fd_Params_inflation_min           protoreflect.FieldDescriptor
	fd_Params_goal_bonded             protoreflect.FieldDescriptor
	fd_Params_blocks_per_year         protoreflect.FieldDescriptor
	fd_Params_max_withdrawal_per_time protoreflect.FieldDescriptor
	fd_Params_integration_addresses   protoreflect.FieldDescriptor
	fd_Params_mint_air                protoreflect.FieldDescriptor
	fd_Params_eligible_accounts_pool  protoreflect.FieldDescriptor
	fd_Params_max_allowed_mint_volume protoreflect.FieldDescriptor
	fd_Params_allowed_mint_denoms     protoreflect.FieldDescriptor
	fd_Params_allowed_minter          protoreflect.FieldDescriptor
)

func init() {
	file_odincore_odinmint_params_proto_init()
	md_Params = File_odincore_odinmint_params_proto.Messages().ByName("Params")
	fd_Params_mint_denom = md_Params.Fields().ByName("mint_denom")
	fd_Params_inflation_rate_change = md_Params.Fields().ByName("inflation_rate_change")
	fd_Params_inflation_max = md_Params.Fields().ByName("inflation_max")
	fd_Params_inflation_min = md_Params.Fields().ByName("inflation_min")
	fd_Params_goal_bonded = md_Params.Fields().ByName("goal_bonded")
	fd_Params_blocks_per_year = md_Params.Fields().ByName("blocks_per_year")
	fd_Params_max_withdrawal_per_time = md_Params.Fields().ByName("max_withdrawal_per_time")
	fd_Params_integration_addresses = md_Params.Fields().ByName("integration_addresses")
	fd_Params_mint_air = md_Params.Fields().ByName("mint_air")
	fd_Params_eligible_accounts_pool = md_Params.Fields().ByName("eligible_accounts_pool")
	fd_Params_max_allowed_mint_volume = md_Params.Fields().ByName("max_allowed_mint_volume")
	fd_Params_allowed_mint_denoms = md_Params.Fields().ByName("allowed_mint_denoms")
	fd_Params_allowed_minter = md_Params.Fields().ByName("allowed_minter")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_odincore_odinmint_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MintDenom != "" {
		value := protoreflect.ValueOfString(x.MintDenom)
		if !f(fd_Params_mint_denom, value) {
			return
		}
	}
	if x.InflationRateChange != "" {
		value := protoreflect.ValueOfString(x.InflationRateChange)
		if !f(fd_Params_inflation_rate_change, value) {
			return
		}
	}
	if x.InflationMax != "" {
		value := protoreflect.ValueOfString(x.InflationMax)
		if !f(fd_Params_inflation_max, value) {
			return
		}
	}
	if x.InflationMin != "" {
		value := protoreflect.ValueOfString(x.InflationMin)
		if !f(fd_Params_inflation_min, value) {
			return
		}
	}
	if x.GoalBonded != "" {
		value := protoreflect.ValueOfString(x.GoalBonded)
		if !f(fd_Params_goal_bonded, value) {
			return
		}
	}
	if x.BlocksPerYear != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlocksPerYear)
		if !f(fd_Params_blocks_per_year, value) {
			return
		}
	}
	if len(x.MaxWithdrawalPerTime) != 0 {
		value := protoreflect.ValueOfList(&_Params_7_list{list: &x.MaxWithdrawalPerTime})
		if !f(fd_Params_max_withdrawal_per_time, value) {
			return
		}
	}
	if len(x.IntegrationAddresses) != 0 {
		value := protoreflect.ValueOfMap(&_Params_8_map{m: &x.IntegrationAddresses})
		if !f(fd_Params_integration_addresses, value) {
			return
		}
	}
	if x.MintAir != false {
		value := protoreflect.ValueOfBool(x.MintAir)
		if !f(fd_Params_mint_air, value) {
			return
		}
	}
	if len(x.EligibleAccountsPool) != 0 {
		value := protoreflect.ValueOfList(&_Params_10_list{list: &x.EligibleAccountsPool})
		if !f(fd_Params_eligible_accounts_pool, value) {
			return
		}
	}
	if len(x.MaxAllowedMintVolume) != 0 {
		value := protoreflect.ValueOfList(&_Params_11_list{list: &x.MaxAllowedMintVolume})
		if !f(fd_Params_max_allowed_mint_volume, value) {
			return
		}
	}
	if len(x.AllowedMintDenoms) != 0 {
		value := protoreflect.ValueOfList(&_Params_12_list{list: &x.AllowedMintDenoms})
		if !f(fd_Params_allowed_mint_denoms, value) {
			return
		}
	}
	if len(x.AllowedMinter) != 0 {
		value := protoreflect.ValueOfList(&_Params_13_list{list: &x.AllowedMinter})
		if !f(fd_Params_allowed_minter, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "odincore.odinmint.Params.mint_denom":
		return x.MintDenom != ""
	case "odincore.odinmint.Params.inflation_rate_change":
		return x.InflationRateChange != ""
	case "odincore.odinmint.Params.inflation_max":
		return x.InflationMax != ""
	case "odincore.odinmint.Params.inflation_min":
		return x.InflationMin != ""
	case "odincore.odinmint.Params.goal_bonded":
		return x.GoalBonded != ""
	case "odincore.odinmint.Params.blocks_per_year":
		return x.BlocksPerYear != uint64(0)
	case "odincore.odinmint.Params.max_withdrawal_per_time":
		return len(x.MaxWithdrawalPerTime) != 0
	case "odincore.odinmint.Params.integration_addresses":
		return len(x.IntegrationAddresses) != 0
	case "odincore.odinmint.Params.mint_air":
		return x.MintAir != false
	case "odincore.odinmint.Params.eligible_accounts_pool":
		return len(x.EligibleAccountsPool) != 0
	case "odincore.odinmint.Params.max_allowed_mint_volume":
		return len(x.MaxAllowedMintVolume) != 0
	case "odincore.odinmint.Params.allowed_mint_denoms":
		return len(x.AllowedMintDenoms) != 0
	case "odincore.odinmint.Params.allowed_minter":
		return len(x.AllowedMinter) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: odincore.odinmint.Params"))
		}
		panic(fmt.Errorf("message odincore.odinmint.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "odincore.odinmint.Params.mint_denom":
		x.MintDenom = ""
	case "odincore.odinmint.Params.inflation_rate_change":
		x.InflationRateChange = ""
	case "odincore.odinmint.Params.inflation_max":
		x.InflationMax = ""
	case "odincore.odinmint.Params.inflation_min":
		x.InflationMin = ""
	case "odincore.odinmint.Params.goal_bonded":
		x.GoalBonded = ""
	case "odincore.odinmint.Params.blocks_per_year":
		x.BlocksPerYear = uint64(0)
	case "odincore.odinmint.Params.max_withdrawal_per_time":
		x.MaxWithdrawalPerTime = nil
	case "odincore.odinmint.Params.integration_addresses":
		x.IntegrationAddresses = nil
	case "odincore.odinmint.Params.mint_air":
		x.MintAir = false
	case "odincore.odinmint.Params.eligible_accounts_pool":
		x.EligibleAccountsPool = nil
	case "odincore.odinmint.Params.max_allowed_mint_volume":
		x.MaxAllowedMintVolume = nil
	case "odincore.odinmint.Params.allowed_mint_denoms":
		x.AllowedMintDenoms = nil
	case "odincore.odinmint.Params.allowed_minter":
		x.AllowedMinter = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: odincore.odinmint.Params"))
		}
		panic(fmt.Errorf("message odincore.odinmint.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "odincore.odinmint.Params.mint_denom":
		value := x.MintDenom
		return protoreflect.ValueOfString(value)
	case "odincore.odinmint.Params.inflation_rate_change":
		value := x.InflationRateChange
		return protoreflect.ValueOfString(value)
	case "odincore.odinmint.Params.inflation_max":
		value := x.InflationMax
		return protoreflect.ValueOfString(value)
	case "odincore.odinmint.Params.inflation_min":
		value := x.InflationMin
		return protoreflect.ValueOfString(value)
	case "odincore.odinmint.Params.goal_bonded":
		value := x.GoalBonded
		return protoreflect.ValueOfString(value)
	case "odincore.odinmint.Params.blocks_per_year":
		value := x.BlocksPerYear
		return protoreflect.ValueOfUint64(value)
	case "odincore.odinmint.Params.max_withdrawal_per_time":
		if len(x.MaxWithdrawalPerTime) == 0 {
			return protoreflect.ValueOfList(&_Params_7_list{})
		}
		listValue := &_Params_7_list{list: &x.MaxWithdrawalPerTime}
		return protoreflect.ValueOfList(listValue)
	case "odincore.odinmint.Params.integration_addresses":
		if len(x.IntegrationAddresses) == 0 {
			return protoreflect.ValueOfMap(&_Params_8_map{})
		}
		mapValue := &_Params_8_map{m: &x.IntegrationAddresses}
		return protoreflect.ValueOfMap(mapValue)
	case "odincore.odinmint.Params.mint_air":
		value := x.MintAir
		return protoreflect.ValueOfBool(value)
	case "odincore.odinmint.Params.eligible_accounts_pool":
		if len(x.EligibleAccountsPool) == 0 {
			return protoreflect.ValueOfList(&_Params_10_list{})
		}
		listValue := &_Params_10_list{list: &x.EligibleAccountsPool}
		return protoreflect.ValueOfList(listValue)
	case "odincore.odinmint.Params.max_allowed_mint_volume":
		if len(x.MaxAllowedMintVolume) == 0 {
			return protoreflect.ValueOfList(&_Params_11_list{})
		}
		listValue := &_Params_11_list{list: &x.MaxAllowedMintVolume}
		return protoreflect.ValueOfList(listValue)
	case "odincore.odinmint.Params.allowed_mint_denoms":
		if len(x.AllowedMintDenoms) == 0 {
			return protoreflect.ValueOfList(&_Params_12_list{})
		}
		listValue := &_Params_12_list{list: &x.AllowedMintDenoms}
		return protoreflect.ValueOfList(listValue)
	case "odincore.odinmint.Params.allowed_minter":
		if len(x.AllowedMinter) == 0 {
			return protoreflect.ValueOfList(&_Params_13_list{})
		}
		listValue := &_Params_13_list{list: &x.AllowedMinter}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: odincore.odinmint.Params"))
		}
		panic(fmt.Errorf("message odincore.odinmint.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "odincore.odinmint.Params.mint_denom":
		x.MintDenom = value.Interface().(string)
	case "odincore.odinmint.Params.inflation_rate_change":
		x.InflationRateChange = value.Interface().(string)
	case "odincore.odinmint.Params.inflation_max":
		x.InflationMax = value.Interface().(string)
	case "odincore.odinmint.Params.inflation_min":
		x.InflationMin = value.Interface().(string)
	case "odincore.odinmint.Params.goal_bonded":
		x.GoalBonded = value.Interface().(string)
	case "odincore.odinmint.Params.blocks_per_year":
		x.BlocksPerYear = value.Uint()
	case "odincore.odinmint.Params.max_withdrawal_per_time":
		lv := value.List()
		clv := lv.(*_Params_7_list)
		x.MaxWithdrawalPerTime = *clv.list
	case "odincore.odinmint.Params.integration_addresses":
		mv := value.Map()
		cmv := mv.(*_Params_8_map)
		x.IntegrationAddresses = *cmv.m
	case "odincore.odinmint.Params.mint_air":
		x.MintAir = value.Bool()
	case "odincore.odinmint.Params.eligible_accounts_pool":
		lv := value.List()
		clv := lv.(*_Params_10_list)
		x.EligibleAccountsPool = *clv.list
	case "odincore.odinmint.Params.max_allowed_mint_volume":
		lv := value.List()
		clv := lv.(*_Params_11_list)
		x.MaxAllowedMintVolume = *clv.list
	case "odincore.odinmint.Params.allowed_mint_denoms":
		lv := value.List()
		clv := lv.(*_Params_12_list)
		x.AllowedMintDenoms = *clv.list
	case "odincore.odinmint.Params.allowed_minter":
		lv := value.List()
		clv := lv.(*_Params_13_list)
		x.AllowedMinter = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: odincore.odinmint.Params"))
		}
		panic(fmt.Errorf("message odincore.odinmint.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "odincore.odinmint.Params.max_withdrawal_per_time":
		if x.MaxWithdrawalPerTime == nil {
			x.MaxWithdrawalPerTime = []*v1beta1.Coin{}
		}
		value := &_Params_7_list{list: &x.MaxWithdrawalPerTime}
		return protoreflect.ValueOfList(value)
	case "odincore.odinmint.Params.integration_addresses":
		if x.IntegrationAddresses == nil {
			x.IntegrationAddresses = make(map[string]string)
		}
		value := &_Params_8_map{m: &x.IntegrationAddresses}
		return protoreflect.ValueOfMap(value)
	case "odincore.odinmint.Params.eligible_accounts_pool":
		if x.EligibleAccountsPool == nil {
			x.EligibleAccountsPool = []string{}
		}
		value := &_Params_10_list{list: &x.EligibleAccountsPool}
		return protoreflect.ValueOfList(value)
	case "odincore.odinmint.Params.max_allowed_mint_volume":
		if x.MaxAllowedMintVolume == nil {
			x.MaxAllowedMintVolume = []*v1beta1.Coin{}
		}
		value := &_Params_11_list{list: &x.MaxAllowedMintVolume}
		return protoreflect.ValueOfList(value)
	case "odincore.odinmint.Params.allowed_mint_denoms":
		if x.AllowedMintDenoms == nil {
			x.AllowedMintDenoms = []*AllowedDenom{}
		}
		value := &_Params_12_list{list: &x.AllowedMintDenoms}
		return protoreflect.ValueOfList(value)
	case "odincore.odinmint.Params.allowed_minter":
		if x.AllowedMinter == nil {
			x.AllowedMinter = []string{}
		}
		value := &_Params_13_list{list: &x.AllowedMinter}
		return protoreflect.ValueOfList(value)
	case "odincore.odinmint.Params.mint_denom":
		panic(fmt.Errorf("field mint_denom of message odincore.odinmint.Params is not mutable"))
	case "odincore.odinmint.Params.inflation_rate_change":
		panic(fmt.Errorf("field inflation_rate_change of message odincore.odinmint.Params is not mutable"))
	case "odincore.odinmint.Params.inflation_max":
		panic(fmt.Errorf("field inflation_max of message odincore.odinmint.Params is not mutable"))
	case "odincore.odinmint.Params.inflation_min":
		panic(fmt.Errorf("field inflation_min of message odincore.odinmint.Params is not mutable"))
	case "odincore.odinmint.Params.goal_bonded":
		panic(fmt.Errorf("field goal_bonded of message odincore.odinmint.Params is not mutable"))
	case "odincore.odinmint.Params.blocks_per_year":
		panic(fmt.Errorf("field blocks_per_year of message odincore.odinmint.Params is not mutable"))
	case "odincore.odinmint.Params.mint_air":
		panic(fmt.Errorf("field mint_air of message odincore.odinmint.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: odincore.odinmint.Params"))
		}
		panic(fmt.Errorf("message odincore.odinmint.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "odincore.odinmint.Params.mint_denom":
		return protoreflect.ValueOfString("")
	case "odincore.odinmint.Params.inflation_rate_change":
		return protoreflect.ValueOfString("")
	case "odincore.odinmint.Params.inflation_max":
		return protoreflect.ValueOfString("")
	case "odincore.odinmint.Params.inflation_min":
		return protoreflect.ValueOfString("")
	case "odincore.odinmint.Params.goal_bonded":
		return protoreflect.ValueOfString("")
	case "odincore.odinmint.Params.blocks_per_year":
		return protoreflect.ValueOfUint64(uint64(0))
	case "odincore.odinmint.Params.max_withdrawal_per_time":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Params_7_list{list: &list})
	case "odincore.odinmint.Params.integration_addresses":
		m := make(map[string]string)
		return protoreflect.ValueOfMap(&_Params_8_map{m: &m})
	case "odincore.odinmint.Params.mint_air":
		return protoreflect.ValueOfBool(false)
	case "odincore.odinmint.Params.eligible_accounts_pool":
		list := []string{}
		return protoreflect.ValueOfList(&_Params_10_list{list: &list})
	case "odincore.odinmint.Params.max_allowed_mint_volume":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Params_11_list{list: &list})
	case "odincore.odinmint.Params.allowed_mint_denoms":
		list := []*AllowedDenom{}
		return protoreflect.ValueOfList(&_Params_12_list{list: &list})
	case "odincore.odinmint.Params.allowed_minter":
		list := []string{}
		return protoreflect.ValueOfList(&_Params_13_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: odincore.odinmint.Params"))
		}
		panic(fmt.Errorf("message odincore.odinmint.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in odincore.odinmint.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.MintDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InflationRateChange)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InflationMax)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InflationMin)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.GoalBonded)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlocksPerYear != 0 {
			n += 1 + runtime.Sov(uint64(x.BlocksPerYear))
		}
		if len(x.MaxWithdrawalPerTime) > 0 {
			for _, e := range x.MaxWithdrawalPerTime {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.IntegrationAddresses) > 0 {
			SiZeMaP := func(k string, v string) {
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + 1 + len(v) + runtime.Sov(uint64(len(v)))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.IntegrationAddresses))
				for k := range x.IntegrationAddresses {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.IntegrationAddresses[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.IntegrationAddresses {
					SiZeMaP(k, v)
				}
			}
		}
		if x.MintAir {
			n += 2
		}
		if len(x.EligibleAccountsPool) > 0 {
			for _, s := range x.EligibleAccountsPool {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.MaxAllowedMintVolume) > 0 {
			for _, e := range x.MaxAllowedMintVolume {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.AllowedMintDenoms) > 0 {
			for _, e := range x.AllowedMintDenoms {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.AllowedMinter) > 0 {
			for _, s := range x.AllowedMinter {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AllowedMinter) > 0 {
			for iNdEx := len(x.AllowedMinter) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.AllowedMinter[iNdEx])
				copy(dAtA[i:], x.AllowedMinter[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AllowedMinter[iNdEx])))
				i--
				dAtA[i] = 0x6a
			}
		}
		if len(x.AllowedMintDenoms) > 0 {
			for iNdEx := len(x.AllowedMintDenoms) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AllowedMintDenoms[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x62
			}
		}
		if len(x.MaxAllowedMintVolume) > 0 {
			for iNdEx := len(x.MaxAllowedMintVolume) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MaxAllowedMintVolume[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x5a
			}
		}
		if len(x.EligibleAccountsPool) > 0 {
			for iNdEx := len(x.EligibleAccountsPool) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.EligibleAccountsPool[iNdEx])
				copy(dAtA[i:], x.EligibleAccountsPool[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EligibleAccountsPool[iNdEx])))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.MintAir {
			i--
			if x.MintAir {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x48
		}
		if len(x.IntegrationAddresses) > 0 {
			MaRsHaLmAp := func(k string, v string) (protoiface.MarshalOutput, error) {
				baseI := i
				i -= len(v)
				copy(dAtA[i:], v)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x42
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForIntegrationAddresses := make([]string, 0, len(x.IntegrationAddresses))
				for k := range x.IntegrationAddresses {
					keysForIntegrationAddresses = append(keysForIntegrationAddresses, string(k))
				}
				sort.Slice(keysForIntegrationAddresses, func(i, j int) bool {
					return keysForIntegrationAddresses[i] < keysForIntegrationAddresses[j]
				})
				for iNdEx := len(keysForIntegrationAddresses) - 1; iNdEx >= 0; iNdEx-- {
					v := x.IntegrationAddresses[string(keysForIntegrationAddresses[iNdEx])]
					out, err := MaRsHaLmAp(keysForIntegrationAddresses[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.IntegrationAddresses {
					v := x.IntegrationAddresses[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.MaxWithdrawalPerTime) > 0 {
			for iNdEx := len(x.MaxWithdrawalPerTime) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MaxWithdrawalPerTime[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.BlocksPerYear != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlocksPerYear))
			i--
			dAtA[i] = 0x30
		}
		if len(x.GoalBonded) > 0 {
			i -= len(x.GoalBonded)
			copy(dAtA[i:], x.GoalBonded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GoalBonded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.InflationMin) > 0 {
			i -= len(x.InflationMin)
			copy(dAtA[i:], x.InflationMin)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InflationMin)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.InflationMax) > 0 {
			i -= len(x.InflationMax)
			copy(dAtA[i:], x.InflationMax)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InflationMax)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.InflationRateChange) > 0 {
			i -= len(x.InflationRateChange)
			copy(dAtA[i:], x.InflationRateChange)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InflationRateChange)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.MintDenom) > 0 {
			i -= len(x.MintDenom)
			copy(dAtA[i:], x.MintDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MintDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MintDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InflationRateChange", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InflationRateChange = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InflationMax", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InflationMax = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InflationMin", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InflationMin = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GoalBonded", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GoalBonded = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlocksPerYear", wireType)
				}
				x.BlocksPerYear = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlocksPerYear |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxWithdrawalPerTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxWithdrawalPerTime = append(x.MaxWithdrawalPerTime, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MaxWithdrawalPerTime[len(x.MaxWithdrawalPerTime)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IntegrationAddresses", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.IntegrationAddresses == nil {
					x.IntegrationAddresses = make(map[string]string)
				}
				var mapkey string
				var mapvalue string
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var stringLenmapvalue uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapvalue := int(stringLenmapvalue)
						if intStringLenmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapvalue := iNdEx + intStringLenmapvalue
						if postStringIndexmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapvalue > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
						iNdEx = postStringIndexmapvalue
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.IntegrationAddresses[mapkey] = mapvalue
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintAir", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.MintAir = bool(v != 0)
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EligibleAccountsPool", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EligibleAccountsPool = append(x.EligibleAccountsPool, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedMintVolume", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxAllowedMintVolume = append(x.MaxAllowedMintVolume, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MaxAllowedMintVolume[len(x.MaxAllowedMintVolume)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AllowedMintDenoms", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AllowedMintDenoms = append(x.AllowedMintDenoms, &AllowedDenom{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AllowedMintDenoms[len(x.AllowedMintDenoms)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AllowedMinter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AllowedMinter = append(x.AllowedMinter, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: odincore/odinmint/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the module.
// Params holds parameters for the mint module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of coin to mint
	MintDenom string `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	// maximum annual change in inflation rate
	InflationRateChange string `protobuf:"bytes,2,opt,name=inflation_rate_change,json=inflationRateChange,proto3" json:"inflation_rate_change,omitempty"`
	// maximum inflation rate
	InflationMax string `protobuf:"bytes,3,opt,name=inflation_max,json=inflationMax,proto3" json:"inflation_max,omitempty"`
	// minimum inflation rate
	InflationMin string `protobuf:"bytes,4,opt,name=inflation_min,json=inflationMin,proto3" json:"inflation_min,omitempty"`
	// goal of percent bonded atoms
	GoalBonded string `protobuf:"bytes,5,opt,name=goal_bonded,json=goalBonded,proto3" json:"goal_bonded,omitempty"`
	// expected blocks per year
	BlocksPerYear uint64 `protobuf:"varint,6,opt,name=blocks_per_year,json=blocksPerYear,proto3" json:"blocks_per_year,omitempty"`
	// max amount to withdraw per time
	MaxWithdrawalPerTime []*v1beta1.Coin `protobuf:"bytes,7,rep,name=max_withdrawal_per_time,json=maxWithdrawalPerTime,proto3" json:"max_withdrawal_per_time,omitempty"`
	// map with smart contracts addresses
	IntegrationAddresses map[string]string `protobuf:"bytes,8,rep,name=integration_addresses,json=integrationAddresses,proto3" json:"integration_addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// flag if minting from air
	MintAir bool `protobuf:"varint,9,opt,name=mint_air,json=mintAir,proto3" json:"mint_air,omitempty"`
	// eligible to withdraw accounts
	EligibleAccountsPool []string `protobuf:"bytes,10,rep,name=eligible_accounts_pool,json=eligibleAccountsPool,proto3" json:"eligible_accounts_pool,omitempty"`
	// max allowed mint volume
	MaxAllowedMintVolume []*v1beta1.Coin `protobuf:"bytes,11,rep,name=max_allowed_mint_volume,json=maxAllowedMintVolume,proto3" json:"max_allowed_mint_volume,omitempty"`
	// allowed mint denoms
	AllowedMintDenoms []*AllowedDenom `protobuf:"bytes,12,rep,name=allowed_mint_denoms,json=allowedMintDenoms,proto3" json:"allowed_mint_denoms,omitempty"`
	// allowed minter
	AllowedMinter []string `protobuf:"bytes,13,rep,name=allowed_minter,json=allowedMinter,proto3" json:"allowed_minter,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_odincore_odinmint_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_odincore_odinmint_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetMintDenom() string {
	if x != nil {
		return x.MintDenom
	}
	return ""
}

func (x *Params) GetInflationRateChange() string {
	if x != nil {
		return x.InflationRateChange
	}
	return ""
}

func (x *Params) GetInflationMax() string {
	if x != nil {
		return x.InflationMax
	}
	return ""
}

func (x *Params) GetInflationMin() string {
	if x != nil {
		return x.InflationMin
	}
	return ""
}

func (x *Params) GetGoalBonded() string {
	if x != nil {
		return x.GoalBonded
	}
	return ""
}

func (x *Params) GetBlocksPerYear() uint64 {
	if x != nil {
		return x.BlocksPerYear
	}
	return 0
}

func (x *Params) GetMaxWithdrawalPerTime() []*v1beta1.Coin {
	if x != nil {
		return x.MaxWithdrawalPerTime
	}
	return nil
}

func (x *Params) GetIntegrationAddresses() map[string]string {
	if x != nil {
		return x.IntegrationAddresses
	}
	return nil
}

func (x *Params) GetMintAir() bool {
	if x != nil {
		return x.MintAir
	}
	return false
}

func (x *Params) GetEligibleAccountsPool() []string {
	if x != nil {
		return x.EligibleAccountsPool
	}
	return nil
}

func (x *Params) GetMaxAllowedMintVolume() []*v1beta1.Coin {
	if x != nil {
		return x.MaxAllowedMintVolume
	}
	return nil
}

func (x *Params) GetAllowedMintDenoms() []*AllowedDenom {
	if x != nil {
		return x.AllowedMintDenoms
	}
	return nil
}

func (x *Params) GetAllowedMinter() []string {
	if x != nil {
		return x.AllowedMinter
	}
	return nil
}

var File_odincore_odinmint_params_proto protoreflect.FileDescriptor

var file_odincore_odinmint_params_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6f, 0x64, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6f, 0x64, 0x69, 0x6e, 0x6d,
	0x69, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x6f, 0x64, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x6d,
	0x69, 0x6e, 0x74, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6f, 0x64, 0x69, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x6f, 0x64, 0x69, 0x6e, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x12, 0x77, 0x0a, 0x15, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x43, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x1c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x69,
	0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x52, 0x13, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x69, 0x6e,
	0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x14, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x22, 0x52, 0x0c,
	0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x60, 0x0a, 0x0d,
	0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x14, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x22,
	0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x5a,
	0x0a, 0x0b, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x39, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x52, 0x0a,
	0x67, 0x6f, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x1a, 0xf2, 0xde, 0x1f, 0x16, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x22, 0x52,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0xa4,
	0x01, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x52, 0xc8, 0xde, 0x1f,
	0x00, 0xf2, 0xde, 0x1f, 0x1e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6d, 0x61, 0x78, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52,
	0x14, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x20, 0xf2, 0xde, 0x1f, 0x1c,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x52, 0x14, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x69, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x13, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x69, 0x72, 0x22, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x74, 0x41,
	0x69, 0x72, 0x12, 0x57, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x21, 0xf2, 0xde, 0x1f, 0x1d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x52, 0x14, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0xa4, 0x01, 0x0a, 0x17,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x52, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde,
	0x1f, 0x1e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x6d,
	0x69, 0x6e, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x42, 0x1e, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x73, 0x22,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xf2, 0xde, 0x1f,
	0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x47, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x08,
	0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0xad, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d,
	0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x6d, 0x69,
	0x6e, 0x74, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x22, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x64, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6f, 0x64, 0x69,
	0x6e, 0x6d, 0x69, 0x6e, 0x74, 0xa2, 0x02, 0x03, 0x4f, 0x4f, 0x58, 0xaa, 0x02, 0x11, 0x4f, 0x64,
	0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x64, 0x69, 0x6e, 0x6d, 0x69, 0x6e, 0x74, 0xca,
	0x02, 0x11, 0x4f, 0x64, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x4f, 0x64, 0x69, 0x6e, 0x6d,
	0x69, 0x6e, 0x74, 0xe2, 0x02, 0x1d, 0x4f, 0x64, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x4f,
	0x64, 0x69, 0x6e, 0x6d, 0x69, 0x6e, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x4f, 0x64, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x3a, 0x3a,
	0x4f, 0x64, 0x69, 0x6e, 0x6d, 0x69, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_odincore_odinmint_params_proto_rawDescOnce sync.Once
	file_odincore_odinmint_params_proto_rawDescData = file_odincore_odinmint_params_proto_rawDesc
)

func file_odincore_odinmint_params_proto_rawDescGZIP() []byte {
	file_odincore_odinmint_params_proto_rawDescOnce.Do(func() {
		file_odincore_odinmint_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_odincore_odinmint_params_proto_rawDescData)
	})
	return file_odincore_odinmint_params_proto_rawDescData
}

var file_odincore_odinmint_params_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_odincore_odinmint_params_proto_goTypes = []interface{}{
	(*Params)(nil),       // 0: odincore.odinmint.Params
	nil,                  // 1: odincore.odinmint.Params.IntegrationAddressesEntry
	(*v1beta1.Coin)(nil), // 2: cosmos.base.v1beta1.Coin
	(*AllowedDenom)(nil), // 3: odincore.odinmint.AllowedDenom
}
var file_odincore_odinmint_params_proto_depIdxs = []int32{
	2, // 0: odincore.odinmint.Params.max_withdrawal_per_time:type_name -> cosmos.base.v1beta1.Coin
	1, // 1: odincore.odinmint.Params.integration_addresses:type_name -> odincore.odinmint.Params.IntegrationAddressesEntry
	2, // 2: odincore.odinmint.Params.max_allowed_mint_volume:type_name -> cosmos.base.v1beta1.Coin
	3, // 3: odincore.odinmint.Params.allowed_mint_denoms:type_name -> odincore.odinmint.AllowedDenom
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_odincore_odinmint_params_proto_init() }
func file_odincore_odinmint_params_proto_init() {
	if File_odincore_odinmint_params_proto != nil {
		return
	}
	file_odincore_odinmint_mint_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_odincore_odinmint_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_odincore_odinmint_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_odincore_odinmint_params_proto_goTypes,
		DependencyIndexes: file_odincore_odinmint_params_proto_depIdxs,
		MessageInfos:      file_odincore_odinmint_params_proto_msgTypes,
	}.Build()
	File_odincore_odinmint_params_proto = out.File
	file_odincore_odinmint_params_proto_rawDesc = nil
	file_odincore_odinmint_params_proto_goTypes = nil
	file_odincore_odinmint_params_proto_depIdxs = nil
}
