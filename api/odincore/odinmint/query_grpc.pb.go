// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: odincore/odinmint/query.proto

package odinmint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName             = "/odincore.odinmint.Query/Params"
	Query_Inflation_FullMethodName          = "/odincore.odinmint.Query/Inflation"
	Query_AnnualProvisions_FullMethodName   = "/odincore.odinmint.Query/AnnualProvisions"
	Query_IntegrationAddress_FullMethodName = "/odincore.odinmint.Query/IntegrationAddress"
	Query_TreasuryPool_FullMethodName       = "/odincore.odinmint.Query/TreasuryPool"
	Query_CurrentMintVolume_FullMethodName  = "/odincore.odinmint.Query/CurrentMintVolume"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the total set of minting parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Inflation returns current inflation.
	Inflation(ctx context.Context, in *QueryInflationRequest, opts ...grpc.CallOption) (*QueryInflationResponse, error)
	// Inflation returns current annual provisions.
	AnnualProvisions(ctx context.Context, in *QueryAnnualProvisionsRequest, opts ...grpc.CallOption) (*QueryAnnualProvisionsResponse, error)
	// Inflation returns integration address.
	IntegrationAddress(ctx context.Context, in *QueryIntegrationAddressRequest, opts ...grpc.CallOption) (*QueryIntegrationAddressResponse, error)
	// Inflation returns current treasury pool.
	TreasuryPool(ctx context.Context, in *QueryTreasuryPoolRequest, opts ...grpc.CallOption) (*QueryTreasuryPoolResponse, error)
	// CurrentMintVolume returns current minted coins volume.
	CurrentMintVolume(ctx context.Context, in *QueryCurrentMintVolumeRequest, opts ...grpc.CallOption) (*QueryCurrentMintVolumeResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Inflation(ctx context.Context, in *QueryInflationRequest, opts ...grpc.CallOption) (*QueryInflationResponse, error) {
	out := new(QueryInflationResponse)
	err := c.cc.Invoke(ctx, Query_Inflation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AnnualProvisions(ctx context.Context, in *QueryAnnualProvisionsRequest, opts ...grpc.CallOption) (*QueryAnnualProvisionsResponse, error) {
	out := new(QueryAnnualProvisionsResponse)
	err := c.cc.Invoke(ctx, Query_AnnualProvisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IntegrationAddress(ctx context.Context, in *QueryIntegrationAddressRequest, opts ...grpc.CallOption) (*QueryIntegrationAddressResponse, error) {
	out := new(QueryIntegrationAddressResponse)
	err := c.cc.Invoke(ctx, Query_IntegrationAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TreasuryPool(ctx context.Context, in *QueryTreasuryPoolRequest, opts ...grpc.CallOption) (*QueryTreasuryPoolResponse, error) {
	out := new(QueryTreasuryPoolResponse)
	err := c.cc.Invoke(ctx, Query_TreasuryPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentMintVolume(ctx context.Context, in *QueryCurrentMintVolumeRequest, opts ...grpc.CallOption) (*QueryCurrentMintVolumeResponse, error) {
	out := new(QueryCurrentMintVolumeResponse)
	err := c.cc.Invoke(ctx, Query_CurrentMintVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params returns the total set of minting parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Inflation returns current inflation.
	Inflation(context.Context, *QueryInflationRequest) (*QueryInflationResponse, error)
	// Inflation returns current annual provisions.
	AnnualProvisions(context.Context, *QueryAnnualProvisionsRequest) (*QueryAnnualProvisionsResponse, error)
	// Inflation returns integration address.
	IntegrationAddress(context.Context, *QueryIntegrationAddressRequest) (*QueryIntegrationAddressResponse, error)
	// Inflation returns current treasury pool.
	TreasuryPool(context.Context, *QueryTreasuryPoolRequest) (*QueryTreasuryPoolResponse, error)
	// CurrentMintVolume returns current minted coins volume.
	CurrentMintVolume(context.Context, *QueryCurrentMintVolumeRequest) (*QueryCurrentMintVolumeResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Inflation(context.Context, *QueryInflationRequest) (*QueryInflationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inflation not implemented")
}
func (UnimplementedQueryServer) AnnualProvisions(context.Context, *QueryAnnualProvisionsRequest) (*QueryAnnualProvisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnualProvisions not implemented")
}
func (UnimplementedQueryServer) IntegrationAddress(context.Context, *QueryIntegrationAddressRequest) (*QueryIntegrationAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrationAddress not implemented")
}
func (UnimplementedQueryServer) TreasuryPool(context.Context, *QueryTreasuryPoolRequest) (*QueryTreasuryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TreasuryPool not implemented")
}
func (UnimplementedQueryServer) CurrentMintVolume(context.Context, *QueryCurrentMintVolumeRequest) (*QueryCurrentMintVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentMintVolume not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Inflation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInflationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Inflation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Inflation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Inflation(ctx, req.(*QueryInflationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AnnualProvisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAnnualProvisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AnnualProvisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AnnualProvisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AnnualProvisions(ctx, req.(*QueryAnnualProvisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IntegrationAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIntegrationAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IntegrationAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IntegrationAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IntegrationAddress(ctx, req.(*QueryIntegrationAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TreasuryPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTreasuryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TreasuryPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TreasuryPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TreasuryPool(ctx, req.(*QueryTreasuryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentMintVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentMintVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentMintVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentMintVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentMintVolume(ctx, req.(*QueryCurrentMintVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odincore.odinmint.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Inflation",
			Handler:    _Query_Inflation_Handler,
		},
		{
			MethodName: "AnnualProvisions",
			Handler:    _Query_AnnualProvisions_Handler,
		},
		{
			MethodName: "IntegrationAddress",
			Handler:    _Query_IntegrationAddress_Handler,
		},
		{
			MethodName: "TreasuryPool",
			Handler:    _Query_TreasuryPool_Handler,
		},
		{
			MethodName: "CurrentMintVolume",
			Handler:    _Query_CurrentMintVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odincore/odinmint/query.proto",
}
