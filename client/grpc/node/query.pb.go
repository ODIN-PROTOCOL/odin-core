// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: odinchain/v1/node/query.proto

package node

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryChainIDRequest is request type for the Service/ChainID RPC method.
type QueryChainIDRequest struct {
}

func (m *QueryChainIDRequest) Reset()         { *m = QueryChainIDRequest{} }
func (m *QueryChainIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainIDRequest) ProtoMessage()    {}
func (*QueryChainIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d79969565f8481, []int{0}
}
func (m *QueryChainIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainIDRequest.Merge(m, src)
}
func (m *QueryChainIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainIDRequest proto.InternalMessageInfo

// QueryChainIDResponse is response type for the Service/ChainID RPC method.
type ServiceChainIDResponse struct {
	ChainID string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ServiceChainIDResponse) Reset()         { *m = ServiceChainIDResponse{} }
func (m *ServiceChainIDResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceChainIDResponse) ProtoMessage()    {}
func (*ServiceChainIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d79969565f8481, []int{1}
}
func (m *ServiceChainIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceChainIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceChainIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceChainIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceChainIDResponse.Merge(m, src)
}
func (m *ServiceChainIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceChainIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceChainIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceChainIDResponse proto.InternalMessageInfo

func (m *ServiceChainIDResponse) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

// QueryEVMValidatorsRequest is request type for the Service/EVMValidators RPC method.
type QueryEVMValidatorsRequest struct {
}

func (m *QueryEVMValidatorsRequest) Reset()         { *m = QueryEVMValidatorsRequest{} }
func (m *QueryEVMValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEVMValidatorsRequest) ProtoMessage()    {}
func (*QueryEVMValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d79969565f8481, []int{2}
}
func (m *QueryEVMValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEVMValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEVMValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEVMValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEVMValidatorsRequest.Merge(m, src)
}
func (m *QueryEVMValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEVMValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEVMValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEVMValidatorsRequest proto.InternalMessageInfo

// QueryEVMValidatorsResponse is response type for the Service/EVMValidators RPC method.
type ServiceEVMValidatorsResponse struct {
	// BlockHeight is the latest block height
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Validators is list of validator's addresss and voting power
	Validators []ValidatorMinimal `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators"`
}

func (m *ServiceEVMValidatorsResponse) Reset()         { *m = ServiceEVMValidatorsResponse{} }
func (m *ServiceEVMValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceEVMValidatorsResponse) ProtoMessage()    {}
func (*ServiceEVMValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d79969565f8481, []int{3}
}
func (m *ServiceEVMValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceEVMValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceEVMValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceEVMValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceEVMValidatorsResponse.Merge(m, src)
}
func (m *ServiceEVMValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceEVMValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceEVMValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceEVMValidatorsResponse proto.InternalMessageInfo

func (m *ServiceEVMValidatorsResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ServiceEVMValidatorsResponse) GetValidators() []ValidatorMinimal {
	if m != nil {
		return m.Validators
	}
	return nil
}

// ValidatorMinimal is the data structure for storing validator's address and voting power
type ValidatorMinimal struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VotingPower int64  `protobuf:"varint,2,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *ValidatorMinimal) Reset()         { *m = ValidatorMinimal{} }
func (m *ValidatorMinimal) String() string { return proto.CompactTextString(m) }
func (*ValidatorMinimal) ProtoMessage()    {}
func (*ValidatorMinimal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d79969565f8481, []int{4}
}
func (m *ValidatorMinimal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorMinimal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorMinimal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorMinimal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorMinimal.Merge(m, src)
}
func (m *ValidatorMinimal) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorMinimal) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorMinimal.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorMinimal proto.InternalMessageInfo

func (m *ValidatorMinimal) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValidatorMinimal) GetVotingPower() int64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryChainIDRequest)(nil), "odinchain.v1.node.QueryChainIDRequest")
	proto.RegisterType((*ServiceChainIDResponse)(nil), "odinchain.v1.node.ServiceChainIDResponse")
	proto.RegisterType((*QueryEVMValidatorsRequest)(nil), "odinchain.v1.node.QueryEVMValidatorsRequest")
	proto.RegisterType((*ServiceEVMValidatorsResponse)(nil), "odinchain.v1.node.ServiceEVMValidatorsResponse")
	proto.RegisterType((*ValidatorMinimal)(nil), "odinchain.v1.node.ValidatorMinimal")
}

func init() { proto.RegisterFile("odinchain/v1/node/query.proto", fileDescriptor_b9d79969565f8481) }

var fileDescriptor_b9d79969565f8481 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0x3a, 0x44, 0xc1, 0x05, 0x09, 0x0c, 0x4c, 0xa1, 0x94, 0x6c, 0x04, 0x34, 0x0d, 0x89,
	0xc6, 0xda, 0xf6, 0x07, 0x50, 0x37, 0x24, 0x2a, 0x51, 0x32, 0x02, 0xda, 0x81, 0x4b, 0xe5, 0x26,
	0x96, 0x6b, 0x91, 0xfa, 0x65, 0x8e, 0x1b, 0x84, 0xc4, 0x89, 0x33, 0x07, 0x24, 0x38, 0xf3, 0x7b,
	0x76, 0x9c, 0xc4, 0x85, 0xd3, 0x84, 0x5a, 0x7e, 0x08, 0x8a, 0xd3, 0x04, 0x3a, 0xb2, 0x9b, 0xf3,
	0x7d, 0xef, 0x7d, 0xef, 0xf3, 0xf7, 0x1c, 0x74, 0x1f, 0x22, 0x21, 0xc3, 0x09, 0x15, 0x92, 0x64,
	0x3b, 0x44, 0x42, 0xc4, 0xc8, 0xf1, 0x8c, 0xa9, 0x0f, 0x5e, 0xa2, 0x40, 0x03, 0xbe, 0x59, 0xd1,
	0x5e, 0xb6, 0xe3, 0xe5, 0x74, 0xa7, 0xcb, 0x01, 0x78, 0xcc, 0x08, 0x4d, 0x04, 0xa1, 0x52, 0x82,
	0xa6, 0x5a, 0x80, 0x4c, 0x8b, 0x86, 0xce, 0x6d, 0x0e, 0x1c, 0xcc, 0x91, 0xe4, 0xa7, 0x02, 0x75,
	0xef, 0xa0, 0x5b, 0xaf, 0x72, 0xd5, 0xfd, 0x5c, 0x69, 0x70, 0x10, 0xb0, 0xe3, 0x19, 0x4b, 0xb5,
	0xfb, 0x14, 0xad, 0xbf, 0x66, 0x2a, 0x13, 0x21, 0xab, 0x88, 0x34, 0x01, 0x99, 0x32, 0xbc, 0x85,
	0xae, 0x98, 0xa9, 0x23, 0x11, 0xd9, 0xd6, 0xa6, 0xb5, 0x7d, 0xb5, 0xdf, 0x9e, 0x9f, 0x6d, 0xb4,
	0xca, 0xb2, 0x96, 0x21, 0x07, 0x91, 0x7b, 0x0f, 0xdd, 0x35, 0xc2, 0xcf, 0x8e, 0x86, 0x47, 0x34,
	0x16, 0x11, 0xd5, 0xa0, 0xd2, 0x52, 0xfe, 0xb3, 0x85, 0xba, 0x4b, 0xfd, 0x73, 0xfc, 0x72, 0xca,
	0x03, 0x74, 0x6d, 0x1c, 0x43, 0xf8, 0x6e, 0x34, 0x61, 0x82, 0x4f, 0xb4, 0x99, 0xb4, 0x16, 0xb4,
	0x0d, 0xf6, 0xdc, 0x40, 0x78, 0x80, 0x50, 0x56, 0x35, 0xda, 0xcd, 0xcd, 0xb5, 0xed, 0xf6, 0xee,
	0x43, 0xef, 0xbf, 0x54, 0xbc, 0x4a, 0x7d, 0x28, 0xa4, 0x98, 0xd2, 0xb8, 0x7f, 0xe9, 0xe4, 0x6c,
	0xa3, 0x11, 0xfc, 0xd3, 0xec, 0xfa, 0xe8, 0xc6, 0xf9, 0x2a, 0x6c, 0xa3, 0x16, 0x8d, 0x22, 0xc5,
	0xd2, 0xb4, 0xb8, 0x66, 0x50, 0x7e, 0xe6, 0xde, 0x32, 0xd0, 0x42, 0xf2, 0x51, 0x02, 0xef, 0x99,
	0xb2, 0x9b, 0x85, 0xb7, 0x02, 0x3b, 0xcc, 0xa1, 0xdd, 0xef, 0x4d, 0xd4, 0x5a, 0xde, 0x0f, 0x7f,
	0x44, 0x65, 0x38, 0x78, 0xab, 0xc6, 0x5e, 0x4d, 0xfa, 0x9d, 0xc7, 0x35, 0x75, 0xf5, 0xeb, 0x70,
	0x9d, 0x4f, 0x3f, 0x7e, 0x7f, 0x6d, 0xda, 0x78, 0x9d, 0xac, 0x3c, 0x97, 0x72, 0x45, 0xf8, 0x9b,
	0x85, 0xae, 0xaf, 0x44, 0x8c, 0x9f, 0x5c, 0x64, 0xa2, 0x6e, 0x53, 0x1d, 0x72, 0xb1, 0x95, 0xda,
	0xcd, 0xb9, 0x8f, 0x8c, 0x21, 0x07, 0x77, 0x57, 0x0d, 0xb1, 0x6c, 0xda, 0xfb, 0x9b, 0x78, 0x7f,
	0x78, 0x32, 0x77, 0xac, 0xd3, 0xb9, 0x63, 0xfd, 0x9a, 0x3b, 0xd6, 0x97, 0x85, 0xd3, 0x38, 0x5d,
	0x38, 0x8d, 0x9f, 0x0b, 0xa7, 0xf1, 0x76, 0x8f, 0x0b, 0x3d, 0x99, 0x8d, 0xbd, 0x10, 0xa6, 0xc4,
	0x3f, 0x18, 0xbc, 0xec, 0x1d, 0x06, 0xfe, 0x1b, 0x7f, 0xdf, 0x7f, 0x61, 0xf4, 0x7a, 0x21, 0x28,
	0x46, 0xc2, 0x58, 0x30, 0xa9, 0x09, 0x57, 0x49, 0x68, 0x7e, 0x8c, 0xf1, 0x65, 0xf3, 0x98, 0xf7,
	0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x6a, 0xad, 0xe8, 0x34, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// ChainID queries the chain ID of this node
	ChainID(ctx context.Context, in *QueryChainIDRequest, opts ...grpc.CallOption) (*ServiceChainIDResponse, error)
	// EVMValidators queries current list of validator's address and power
	EVMValidators(ctx context.Context, in *QueryEVMValidatorsRequest, opts ...grpc.CallOption) (*ServiceEVMValidatorsResponse, error)
}

type serviceClient struct {
	cc grpc1.ClientConn
}

func NewServiceClient(cc grpc1.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) ChainID(ctx context.Context, in *QueryChainIDRequest, opts ...grpc.CallOption) (*ServiceChainIDResponse, error) {
	out := new(ServiceChainIDResponse)
	err := c.cc.Invoke(ctx, "/odinchain.v1.node.Service/ChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) EVMValidators(ctx context.Context, in *QueryEVMValidatorsRequest, opts ...grpc.CallOption) (*ServiceEVMValidatorsResponse, error) {
	out := new(ServiceEVMValidatorsResponse)
	err := c.cc.Invoke(ctx, "/odinchain.v1.node.Service/EVMValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// ChainID queries the chain ID of this node
	ChainID(context.Context, *QueryChainIDRequest) (*ServiceChainIDResponse, error)
	// EVMValidators queries current list of validator's address and power
	EVMValidators(context.Context, *QueryEVMValidatorsRequest) (*ServiceEVMValidatorsResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) ChainID(ctx context.Context, req *QueryChainIDRequest) (*ServiceChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainID not implemented")
}
func (*UnimplementedServiceServer) EVMValidators(ctx context.Context, req *QueryEVMValidatorsRequest) (*ServiceEVMValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EVMValidators not implemented")
}

func RegisterServiceServer(s grpc1.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_ChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odinchain.v1.node.Service/ChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ChainID(ctx, req.(*QueryChainIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_EVMValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEVMValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).EVMValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odinchain.v1.node.Service/EVMValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).EVMValidators(ctx, req.(*QueryEVMValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "odinchain.v1.node.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChainID",
			Handler:    _Service_ChainID_Handler,
		},
		{
			MethodName: "EVMValidators",
			Handler:    _Service_EVMValidators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odinchain/v1/node/query.proto",
}

func (m *QueryChainIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServiceChainIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceChainIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceChainIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEVMValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEVMValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEVMValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServiceEVMValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceEVMValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEVMValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorMinimal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorMinimal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorMinimal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryChainIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServiceChainIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEVMValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServiceEVMValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ValidatorMinimal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.VotingPower != 0 {
		n += 1 + sovQuery(uint64(m.VotingPower))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryChainIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceChainIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceChainIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceChainIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEVMValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEVMValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEVMValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceEVMValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceEVMValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceEVMValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, ValidatorMinimal{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorMinimal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorMinimal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorMinimal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
