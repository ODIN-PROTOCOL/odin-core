syntax = "proto3";
package telemetry;

option go_package = "github.com/ODIN-PROTOCOL/odin-core/x/telemetry/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/genesis.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/protobuf/timestamp.proto";
import "telemetry/telemetry.proto";
import "cosmos/staking/v1beta1/staking.proto";


// Query defines the gRPC querier service.
service Query {
  // TopBalances returns all the system balances for specific denom.
  rpc TopBalances(QueryTopBalancesRequest) returns (QueryTopBalancesResponse) {
    option (google.api.http).get = "/telemetry/top_balances";
  }

  // ExtendedValidators returns validators balances.
  rpc ExtendedValidators(QueryExtendedValidatorsRequest)
      returns (QueryExtendedValidatorsResponse) {
    option (google.api.http).get = "/telemetry/validators_balances";
  }

  // AvgBlockSize returns average block size per day.
  /*rpc AvgBlockSize(QueryAvgBlockSizeRequest) returns
  (QueryAvgBlockSizeResponse) { option (google.api.http).get =
  "/telemetry/avg_block_size";
  }

  // AvgBlockTime returns average block time per day.
  rpc AvgBlockTime(QueryAvgBlockTimeRequest) returns (QueryAvgBlockTimeResponse)
  { option (google.api.http).get = "/telemetry/avg_block_time";
  }

  // AvgTxFee returns average transaction fee per day.
  rpc AvgTxFee(QueryAvgTxFeeRequest) returns (QueryAvgTxFeeResponse) {
    option (google.api.http).get = "/telemetry/avg_tx_fee";
  }

  // TxVolume returns count of transactions per day.
  rpc TxVolume(QueryTxVolumeRequest) returns (QueryTxVolumeResponse) {
    option (google.api.http).get = "/telemetry/tx_volume";
  }*/

  // TopValidators returns validators blocks and stake percentage.
  rpc TopValidators(QueryTopValidatorsRequest)
      returns (QueryTopValidatorsResponse) {
    option (google.api.http).get = "/telemetry/top_validators";
  }

  // ValidatorBlocks returns validator approved blocks.
  rpc ValidatorBlocks(QueryValidatorBlocksRequest)
      returns (QueryValidatorBlocksResponse) {
    option (google.api.http).get = "/telemetry/validator_blocks";
  }

  rpc ValidatorByConsAddr(QueryValidatorByConsAddrRequest)
      returns (QueryValidatorByConsAddrResponse) {
    option (google.api.http).get =
        "/telemetry/validator_by_cons_addr/{consensus_address}";
  }
}

// QueryTopBalancesRequest is request type for the Query/TopBalances RPC method.
message QueryTopBalancesRequest {
  string denom = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
  bool desc = 3;
}
// QueryTopBalancesResponse is response type for the Query/TopBalances RPC
// method.
message QueryTopBalancesResponse {
  //  map<string, int64> transactionsCount = 1;
  repeated cosmos.bank.v1beta1.Balance balances = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/x/bank/types.Balance",
    (gogoproto.nullable) = false
  ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryExtendedValidatorsRequest {
  string status = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryExtendedValidatorsResponse {
  repeated cosmos.staking.v1beta1.Validator validators = 1 [
    (gogoproto.casttype) =
        "github.com/cosmos/cosmos-sdk/x/staking/types.Validator",
    (gogoproto.nullable) = false
  ];
  repeated cosmos.bank.v1beta1.Balance balances = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/x/bank/types.Balance",
    (gogoproto.nullable) = false
  ];

  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

// QueryAvgBlockSizeRequest is request type for the Query/AvgBlockSize RPC
// method.
message QueryAvgBlockSizeRequest {
  google.protobuf.Timestamp start_date = 1
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
  google.protobuf.Timestamp end_date = 2
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
}
// QueryAvgBlockSizeResponse is response type for the Query/AvgBlockSize RPC
// method.
message QueryAvgBlockSizeResponse {
  repeated AverageBlockSizePerDay avg_block_size_per_day = 1
      [ (gogoproto.nullable) = false ];
}

// QueryAvgBlockTimeRequest is request type for the Query/AvgBlockTime RPC
// method.
message QueryAvgBlockTimeRequest {
  google.protobuf.Timestamp start_date = 1
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
  google.protobuf.Timestamp end_date = 2
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
}

// QueryAvgBlockTimeResponse is response type for the Query/AvgBlockTime RPC
// method.
message QueryAvgBlockTimeResponse {
  repeated AverageBlockTimePerDay avg_block_time_per_day = 1
      [ (gogoproto.nullable) = false ];
}

// QueryAvgTxFeeRequest is request type for the Query/AvgTxFee RPC method.
message QueryAvgTxFeeRequest {
  google.protobuf.Timestamp start_date = 1
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
  google.protobuf.Timestamp end_date = 2
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
}

// QueryAvgTxFeeResponse is response type for the Query/AvgTxFee RPC method.
message QueryAvgTxFeeResponse {
  repeated AverageTxFeePerDay avg_tx_fee_per_day = 1
      [ (gogoproto.nullable) = false ];
}

// QueryTxVolumeRequest is request type for the Query/TxVolume RPC method.
message QueryTxVolumeRequest {
  google.protobuf.Timestamp start_date = 1
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
  google.protobuf.Timestamp end_date = 2
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
}

// QueryAvgTxFeeResponse is response type for the Query/TxVolume RPC method.
message QueryTxVolumeResponse {
  repeated TxVolumePerDay tx_volume_per_day = 1
      [ (gogoproto.nullable) = false ];
}

// QueryTopValidatorsRequest is request type for the Query/TopValidators RPC
// method.
message QueryTopValidatorsRequest {
  google.protobuf.Timestamp start_date = 1
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
  google.protobuf.Timestamp end_date = 2
      [ (gogoproto.nullable) = true, (gogoproto.stdtime) = true ];
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  bool desc = 4;
}

// QueryTopValidatorsResponse is response type for the Query/TopValidators RPC
// method.
message QueryTopValidatorsResponse {
  repeated ValidatorBlockStats top_validators = 1
      [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryValidatorBlocksRequest is request type for the Query/ValidatorBlocks RPC
// method.
message QueryValidatorBlocksRequest {
  string validator_address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
  bool desc = 3;
}

// QueryValidatorBlocksResponse is response type for the Query/ValidatorBlocks
// RPC method.
message QueryValidatorBlocksResponse {
  repeated ValidatorBlock blocks = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryValidatorByConsAddrRequest { string consensus_address = 1; }

message QueryValidatorByConsAddrResponse {
  cosmos.staking.v1beta1.Validator validator = 1 [
    (gogoproto.casttype) =
        "github.com/cosmos/cosmos-sdk/x/staking/types.Validator",
    (gogoproto.nullable) = false
  ];
}