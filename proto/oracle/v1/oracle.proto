syntax = "proto3";
package oracle.v1;

option go_package = "github.com/ODIN-PROTOCOL/odin-core/x/oracle/types";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";

// DataSource is the data structure for storing data sources in the storage.
message DataSource {
  option (gogoproto.equal) = true;
  int64 id = 1 [
    (gogoproto.customname) = "ID",
    (gogoproto.casttype) = "DataSourceID"
  ];
  string owner = 2;
  string name = 3;
  string description = 4;
  string filename = 5;
  repeated cosmos.base.v1beta1.Coin fee = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// OracleScript is the data structure for storing oracle scripts in the storage.
message OracleScript {
  option (gogoproto.equal) = true;
  int64 id = 1 [
    (gogoproto.customname) = "ID",
    (gogoproto.casttype) = "OracleScriptID"
  ];
  string owner = 2;
  string name = 3;
  string description = 4;
  string filename = 5;
  string schema = 6;
  string source_code_url = 7 [(gogoproto.customname) = "SourceCodeURL"];
}

// RawRequest is the data structure for storing raw requests in the storage.
message RawRequest {
  option (gogoproto.equal) = true;
  int64 external_id = 1 [
    (gogoproto.customname) = "ExternalID",
    (gogoproto.casttype) = "ExternalID"
  ];
  int64 data_source_id = 2 [
    (gogoproto.customname) = "DataSourceID",
    (gogoproto.casttype) = "DataSourceID"
  ];
  bytes calldata = 3;
}

// RawRequest is the data structure for storing raw reporter in the storage.
message RawReport {
  option (gogoproto.equal) = true;
  int64 external_id = 1 [
    (gogoproto.customname) = "ExternalID",
    (gogoproto.casttype) = "ExternalID"
  ];
  uint32 exit_code = 2;
  bytes data = 3;
}

// Request is the data structure for storing requests in the storage.
message Request {
  option (gogoproto.equal) = true;
  int64 id = 1 [
    (gogoproto.customname) = "ID",
    (gogoproto.casttype) = "RequestID"
  ];
  int64 oracle_script_id = 2 [
    (gogoproto.customname) = "OracleScriptID",
    (gogoproto.casttype) = "OracleScriptID"
  ];
  bytes calldata = 3;
  repeated string requested_validators = 4;
  uint64 min_count = 5;
  int64 request_height = 6;
  uint64 request_time = 7;
  string client_id = 8 [(gogoproto.customname) = "ClientID"];
  repeated RawRequest raw_requests = 9 [(gogoproto.nullable) = false];
  IBCSource ibc_source = 10 [(gogoproto.customname) = "IBCSource"];
  uint64 execute_gas = 11;
}

// Report is the data structure for storing reports in the storage.
message Report {
  option (gogoproto.equal) = true;
  string validator = 1;
  bool in_before_resolve = 2;
  repeated RawReport raw_reports = 3 [(gogoproto.nullable) = false];
}

// ResolveStatus encodes the status of an oracle request.
enum ResolveStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // Open - the request is not yet resolved.
  RESOLVE_STATUS_OPEN_UNSPECIFIED = 0
  [(gogoproto.enumvalue_customname) = "RESOLVE_STATUS_OPEN"];
  // Success - the request has been resolved successfully with no errors.
  RESOLVE_STATUS_SUCCESS = 1
  [(gogoproto.enumvalue_customname) = "RESOLVE_STATUS_SUCCESS"];
  // Failure - an error occured during the request's resolve call.
  RESOLVE_STATUS_FAILURE = 2
  [(gogoproto.enumvalue_customname) = "RESOLVE_STATUS_FAILURE"];
  // Expired - the request does not get enough reports from validator within the
  // timeframe.
  RESOLVE_STATUS_EXPIRED = 3
  [(gogoproto.enumvalue_customname) = "RESOLVE_STATUS_EXPIRED"];
}

// OracleRequestPacketData encodes an oracle request sent from other blockchains
// to BandChain.
message OracleRequestPacketData {
  option (gogoproto.equal) = true;
  // ClientID is the unique identifier of this oracle request, as specified by
  // the client. This same unique ID will be sent back to the requester with the
  // oracle response.
  string client_id = 1 [(gogoproto.customname) = "ClientID"];
  // OracleScriptID is the unique identifier of the oracle script to be
  // executed.
  int64 oracle_script_id = 2 [
    (gogoproto.customname) = "OracleScriptID",
    (gogoproto.casttype) = "OracleScriptID"
  ];
  // Calldata is the calldata bytes available for oracle executor to read.
  bytes calldata = 3;
  // AskCount is the number of validators that are requested to respond to this
  // oracle request. Higher value means more security, at a higher gas cost.
  uint64 ask_count = 4;
  // MinCount is the minimum number of validators necessary for the request to
  // proceed to the execution phase. Higher value means more security, at the
  // cost of liveness.
  uint64 min_count = 5;
  // FeeLimit is the maximum tokens that will be paid to all data source
  // providers.
  repeated cosmos.base.v1beta1.Coin fee_limit = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // RequestKey is the key from request chain to match data source fee payer on
  // Bandchain
  string request_key = 7;
  // PrepareGas is amount of gas to pay to prepare raw requests
  uint64 prepare_gas = 8;
  // ExecuteGas is amount of gas to reserve for executing
  uint64 execute_gas = 9;
}

// OracleRequestPacketAcknowledgement encodes an oracle request acknowledgement
// send back to requester chain.
message OracleRequestPacketAcknowledgement {
  option (gogoproto.equal) = true;
  // RequestID is BandChain's unique identifier for this oracle request.
  int64 request_id = 1 [
    (gogoproto.customname) = "RequestID",
    (gogoproto.casttype) = "RequestID"
  ];
}

// OracleResponsePacketData encodes an oracle response from BandChain to the
// requester.
message OracleResponsePacketData {
  option (gogoproto.equal) = true;
  // ClientID is the unique identifier matched with that of the oracle request
  // packet.
  string client_id = 1 [(gogoproto.customname) = "ClientID"];
  // RequestID is BandChain's unique identifier for this oracle request.
  int64 request_id = 2 [
    (gogoproto.customname) = "RequestID",
    (gogoproto.casttype) = "RequestID"
  ];
  // AnsCount is the number of validators among to the asked validators that
  // actually responded to this oracle request prior to this oracle request
  // being resolved.
  uint64 ans_count = 3;
  // RequestTime is the UNIX epoch time at which the request was sent to
  // BandChain.
  int64 request_time = 4;
  // ResolveTime is the UNIX epoch time at which the request was resolved to the
  // final result.
  int64 resolve_time = 5;
  // ResolveStatus is the status of this oracle request, which can be OK,
  // FAILURE, or EXPIRED.
  ResolveStatus resolve_status = 6;
  // Result is the final aggregated value only available if status if OK.
  bytes result = 7;
}

message RequestResult {
  option (gogoproto.equal) = true;
  Request request = 1;
  Result result = 2;
  repeated Report reports = 3 [ (gogoproto.nullable) = false ];
}

// Result encodes a result of request and store in chain
message Result {
  option (gogoproto.equal) = true;
  // ClientID is the unique identifier of this oracle request, as specified by
  // the client. This same unique ID will be sent back to the requester with the
  // oracle response.
  string client_id = 1 [(gogoproto.customname) = "ClientID"];
  // OracleScriptID is the unique identifier of the oracle script to be
  // executed.
  int64 oracle_script_id = 2 [
    (gogoproto.customname) = "OracleScriptID",
    (gogoproto.casttype) = "OracleScriptID"
  ];
  // Calldata is the calldata bytes available for oracle executor to read.
  bytes calldata = 3;
  // AskCount is the number of validators that are requested to respond to this
  // oracle request. Higher value means more security, at a higher gas cost.
  uint64 ask_count = 4;
  // MinCount is the minimum number of validators necessary for the request to
  // proceed to the execution phase. Higher value means more security, at the
  // cost of liveness.
  uint64 min_count = 5;
  // RequestID is BandChain's unique identifier for this oracle request.
  int64 request_id = 6 [
    (gogoproto.customname) = "RequestID",
    (gogoproto.casttype) = "RequestID"
  ];
  // AnsCount is the number of validators among to the asked validators that
  // actually responded to this oracle request prior to this oracle request
  // being resolved.
  uint64 ans_count = 7;
  // RequestTime is the UNIX epoch time at which the request was sent to
  // BandChain.
  int64 request_time = 8;
  // ResolveTime is the UNIX epoch time at which the request was resolved to the
  // final result.
  int64 resolve_time = 9;
  // ResolveStatus is the status of this oracle request, which can be OK,
  // FAILURE, or EXPIRED.
  ResolveStatus resolve_status = 11;
  // Result is the final aggregated value only available if status if OK.
  bytes result = 10;
}

// ValidatorStatus maintains whether a validator is an active oracle provider.
message ValidatorStatus {
  option (gogoproto.equal) = true;
  bool is_active = 1;
  google.protobuf.Timestamp since = 2
  [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// PendingResolveList
message PendingResolveList {
  option (gogoproto.equal) = true;
  repeated int64 request_ids = 1;
}

// IBCSource
message IBCSource {
  option (gogoproto.equal) = true;

  // SourceChannel
  string source_channel = 1;
  // SourcePort
  string source_port = 2;
}

message OraclePool {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  repeated cosmos.base.v1beta1.Coin data_providers_pool = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message DataProviderAccumulatedReward {
  option (gogoproto.equal) = false;

  string data_provider = 1;
  repeated cosmos.base.v1beta1.Coin data_provider_reward = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message DataProvidersAccumulatedRewards {
  option (gogoproto.equal) = false;

  repeated cosmos.base.v1beta1.Coin current_reward_per_byte = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  repeated cosmos.base.v1beta1.Coin accumulated_amount = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message AccumulatedPaymentsForData {
  option (gogoproto.equal) = false;

  repeated cosmos.base.v1beta1.Coin accumulated_amount = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// RequestVerification is a message that is constructed and signed by a reporter
// to be used as a part of verification of oracle request.
message RequestVerification {
  option (gogoproto.equal) = true;
  // ChainID is the ID of targeted chain
  string chain_id = 1 [ (gogoproto.customname) = "ChainID" ];
  // Validator is an validator address
  string validator = 2;
  // RequestID is the targeted request ID
  uint64 request_id = 3 [
    (gogoproto.customname) = "RequestID",
    (gogoproto.casttype) = "RequestID"
  ];
  // ExternalID is the oracle's external ID of data source
  uint64 external_id = 4 [
    (gogoproto.customname) = "ExternalID",
    (gogoproto.casttype) = "ExternalID"
  ];
}

// IBCChannel is information of IBC protocol to allow communicating with other
// chain
message IBCChannel {
  option (gogoproto.equal) = true;

  // PortID is port ID used for sending response packet when request is
  // resolved.
  string port_id = 1;
  // ChannelID is channel ID used for sending response packet when request is
  // resolved.
  string channel_id = 2;
}
