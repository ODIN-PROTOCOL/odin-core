syntax = "proto3";
package onft.v1;

option go_package = "github.com/ODIN-PROTOCOL/odin-core/x/onft/types";

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "google/protobuf/any.proto";

// Msg defines the onft Msg service.
service Msg {
  // CreateNFTClass defines a method for creating new nft class
  rpc CreateNFTClass(MsgCreateNFTClass) returns (MsgCreateNFTClassResponse);

  rpc TransferClassOwnership(MsgTransferClassOwnership) returns (MsgTransferClassOwnershipResponse);

  rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);
}

// MsgCreateNFTClass is a message for creating new NFT class
message MsgCreateNFTClass {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "onft/CreateNFTClass";

  option (gogoproto.equal) = true;

  // name defines the human-readable name of the NFT classification. Optional
  string name = 1;

  // symbol is an abbreviated name for nft classification. Optional
  string symbol = 2;

  // description is a brief description of nft classification. Optional
  string description = 3;

  // uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
  string uri = 4;

  // uri_hash is a hash of the document pointed by uri. Optional
  string uri_hash = 5;

  // data is the app specific metadata of the NFT class. Optional
  google.protobuf.Any data = 6;

  // Sender is an account address of message sender.
  string sender = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCreateNFTClassResponse is response data for MsgCreateNFTClass message
message MsgCreateNFTClassResponse {
  // id defines the unique identifier of the NFT classification, similar to the contract address of ERC721
  string id = 1;
}

// MsgTransferClassOwnership is a message for transferring class ownership to another owner
message MsgTransferClassOwnership {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "onft/TransferClassOwnership";

  option (gogoproto.equal) = true;

  string class_id = 1;

  // Sender is an account address of message sender.
  string sender = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string new_owner = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgTransferClassOwnershipResponse is response data for MsgTransferClassOwnership message
message MsgTransferClassOwnershipResponse {}

message MsgMintNFT {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "onft/MintNft";

  option (gogoproto.equal) = true;

  // class_id associated with the NFT, similar to the contract address of ERC721
  string class_id = 1;

  // uri for the NFT metadata stored off chain
  string uri = 2;

  // uri_hash is a hash of the document pointed by uri
  string uri_hash = 3;

  // Sender is an account address of message sender.
  string sender = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string receiver = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // data is an app specific data of the NFT. Optional
  google.protobuf.Any data = 10;
}

// MsgMintNFTResponse is response data for MsgMintNFT message
message MsgMintNFTResponse {
  // id defines the unique identifier of the NFT token
  string id = 1;
}