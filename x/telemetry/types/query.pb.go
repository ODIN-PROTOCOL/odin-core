// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	github_com_cosmos_cosmos_sdk_x_bank_types "github.com/cosmos/cosmos-sdk/x/bank/types"
	github_com_cosmos_cosmos_sdk_x_staking_types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTopBalancesRequest is request type for the Query/TopBalances RPC method.
type QueryTopBalancesRequest struct {
	Denom      string             `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Desc       bool               `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *QueryTopBalancesRequest) Reset()         { *m = QueryTopBalancesRequest{} }
func (m *QueryTopBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopBalancesRequest) ProtoMessage()    {}
func (*QueryTopBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{0}
}
func (m *QueryTopBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopBalancesRequest.Merge(m, src)
}
func (m *QueryTopBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopBalancesRequest proto.InternalMessageInfo

func (m *QueryTopBalancesRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryTopBalancesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryTopBalancesRequest) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

// QueryTopBalancesResponse is response type for the Query/TopBalances RPC method.
type QueryTopBalancesResponse struct {
	//  map<string, int64> transactionsCount = 1;
	Balances   []github_com_cosmos_cosmos_sdk_x_bank_types.Balance `protobuf:"bytes,1,rep,name=balances,proto3,casttype=github.com/cosmos/cosmos-sdk/x/bank/types.Balance" json:"balances"`
	Pagination *query.PageResponse                                 `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTopBalancesResponse) Reset()         { *m = QueryTopBalancesResponse{} }
func (m *QueryTopBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopBalancesResponse) ProtoMessage()    {}
func (*QueryTopBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{1}
}
func (m *QueryTopBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopBalancesResponse.Merge(m, src)
}
func (m *QueryTopBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopBalancesResponse proto.InternalMessageInfo

func (m *QueryTopBalancesResponse) GetBalances() []github_com_cosmos_cosmos_sdk_x_bank_types.Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *QueryTopBalancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryExtendedValidatorsRequest struct {
	Status     string             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExtendedValidatorsRequest) Reset()         { *m = QueryExtendedValidatorsRequest{} }
func (m *QueryExtendedValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedValidatorsRequest) ProtoMessage()    {}
func (*QueryExtendedValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{2}
}
func (m *QueryExtendedValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedValidatorsRequest.Merge(m, src)
}
func (m *QueryExtendedValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedValidatorsRequest proto.InternalMessageInfo

func (m *QueryExtendedValidatorsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryExtendedValidatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryExtendedValidatorsResponse struct {
	Validators []github_com_cosmos_cosmos_sdk_x_staking_types.Validator `protobuf:"bytes,1,rep,name=validators,proto3,casttype=github.com/cosmos/cosmos-sdk/x/staking/types.Validator" json:"validators"`
	Balances   []github_com_cosmos_cosmos_sdk_x_bank_types.Balance      `protobuf:"bytes,2,rep,name=balances,proto3,casttype=github.com/cosmos/cosmos-sdk/x/bank/types.Balance" json:"balances"`
	Pagination *query.PageResponse                                      `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExtendedValidatorsResponse) Reset()         { *m = QueryExtendedValidatorsResponse{} }
func (m *QueryExtendedValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedValidatorsResponse) ProtoMessage()    {}
func (*QueryExtendedValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{3}
}
func (m *QueryExtendedValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedValidatorsResponse.Merge(m, src)
}
func (m *QueryExtendedValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedValidatorsResponse proto.InternalMessageInfo

func (m *QueryExtendedValidatorsResponse) GetValidators() []github_com_cosmos_cosmos_sdk_x_staking_types.Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *QueryExtendedValidatorsResponse) GetBalances() []github_com_cosmos_cosmos_sdk_x_bank_types.Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *QueryExtendedValidatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAvgBlockSizeRequest is request type for the Query/AvgBlockSize RPC method.
type QueryAvgBlockSizeRequest struct {
	StartDate *time.Time `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	EndDate   *time.Time `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
}

func (m *QueryAvgBlockSizeRequest) Reset()         { *m = QueryAvgBlockSizeRequest{} }
func (m *QueryAvgBlockSizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAvgBlockSizeRequest) ProtoMessage()    {}
func (*QueryAvgBlockSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{4}
}
func (m *QueryAvgBlockSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvgBlockSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvgBlockSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvgBlockSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvgBlockSizeRequest.Merge(m, src)
}
func (m *QueryAvgBlockSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvgBlockSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvgBlockSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvgBlockSizeRequest proto.InternalMessageInfo

func (m *QueryAvgBlockSizeRequest) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *QueryAvgBlockSizeRequest) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// QueryAvgBlockSizeResponse is response type for the Query/AvgBlockSize RPC method.
type QueryAvgBlockSizeResponse struct {
	AvgBlockSizePerDay []AverageBlockSizePerDay `protobuf:"bytes,1,rep,name=avg_block_size_per_day,json=avgBlockSizePerDay,proto3" json:"avg_block_size_per_day"`
}

func (m *QueryAvgBlockSizeResponse) Reset()         { *m = QueryAvgBlockSizeResponse{} }
func (m *QueryAvgBlockSizeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAvgBlockSizeResponse) ProtoMessage()    {}
func (*QueryAvgBlockSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{5}
}
func (m *QueryAvgBlockSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvgBlockSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvgBlockSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvgBlockSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvgBlockSizeResponse.Merge(m, src)
}
func (m *QueryAvgBlockSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvgBlockSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvgBlockSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvgBlockSizeResponse proto.InternalMessageInfo

func (m *QueryAvgBlockSizeResponse) GetAvgBlockSizePerDay() []AverageBlockSizePerDay {
	if m != nil {
		return m.AvgBlockSizePerDay
	}
	return nil
}

// QueryAvgBlockTimeRequest is request type for the Query/AvgBlockTime RPC method.
type QueryAvgBlockTimeRequest struct {
	StartDate *time.Time `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	EndDate   *time.Time `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
}

func (m *QueryAvgBlockTimeRequest) Reset()         { *m = QueryAvgBlockTimeRequest{} }
func (m *QueryAvgBlockTimeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAvgBlockTimeRequest) ProtoMessage()    {}
func (*QueryAvgBlockTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{6}
}
func (m *QueryAvgBlockTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvgBlockTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvgBlockTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvgBlockTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvgBlockTimeRequest.Merge(m, src)
}
func (m *QueryAvgBlockTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvgBlockTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvgBlockTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvgBlockTimeRequest proto.InternalMessageInfo

func (m *QueryAvgBlockTimeRequest) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *QueryAvgBlockTimeRequest) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// QueryAvgBlockTimeResponse is response type for the Query/AvgBlockTime RPC method.
type QueryAvgBlockTimeResponse struct {
	AvgBlockTimePerDay []AverageBlockTimePerDay `protobuf:"bytes,1,rep,name=avg_block_time_per_day,json=avgBlockTimePerDay,proto3" json:"avg_block_time_per_day"`
}

func (m *QueryAvgBlockTimeResponse) Reset()         { *m = QueryAvgBlockTimeResponse{} }
func (m *QueryAvgBlockTimeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAvgBlockTimeResponse) ProtoMessage()    {}
func (*QueryAvgBlockTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{7}
}
func (m *QueryAvgBlockTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvgBlockTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvgBlockTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvgBlockTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvgBlockTimeResponse.Merge(m, src)
}
func (m *QueryAvgBlockTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvgBlockTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvgBlockTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvgBlockTimeResponse proto.InternalMessageInfo

func (m *QueryAvgBlockTimeResponse) GetAvgBlockTimePerDay() []AverageBlockTimePerDay {
	if m != nil {
		return m.AvgBlockTimePerDay
	}
	return nil
}

// QueryAvgTxFeeRequest is request type for the Query/AvgTxFee RPC method.
type QueryAvgTxFeeRequest struct {
	StartDate *time.Time `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	EndDate   *time.Time `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
}

func (m *QueryAvgTxFeeRequest) Reset()         { *m = QueryAvgTxFeeRequest{} }
func (m *QueryAvgTxFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAvgTxFeeRequest) ProtoMessage()    {}
func (*QueryAvgTxFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{8}
}
func (m *QueryAvgTxFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvgTxFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvgTxFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvgTxFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvgTxFeeRequest.Merge(m, src)
}
func (m *QueryAvgTxFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvgTxFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvgTxFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvgTxFeeRequest proto.InternalMessageInfo

func (m *QueryAvgTxFeeRequest) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *QueryAvgTxFeeRequest) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// QueryAvgTxFeeResponse is response type for the Query/AvgTxFee RPC method.
type QueryAvgTxFeeResponse struct {
	AvgTxFeePerDay []AverageTxFeePerDay `protobuf:"bytes,1,rep,name=avg_tx_fee_per_day,json=avgTxFeePerDay,proto3" json:"avg_tx_fee_per_day"`
}

func (m *QueryAvgTxFeeResponse) Reset()         { *m = QueryAvgTxFeeResponse{} }
func (m *QueryAvgTxFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAvgTxFeeResponse) ProtoMessage()    {}
func (*QueryAvgTxFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{9}
}
func (m *QueryAvgTxFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvgTxFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvgTxFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvgTxFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvgTxFeeResponse.Merge(m, src)
}
func (m *QueryAvgTxFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvgTxFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvgTxFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvgTxFeeResponse proto.InternalMessageInfo

func (m *QueryAvgTxFeeResponse) GetAvgTxFeePerDay() []AverageTxFeePerDay {
	if m != nil {
		return m.AvgTxFeePerDay
	}
	return nil
}

// QueryTxVolumeRequest is request type for the Query/TxVolume RPC method.
type QueryTxVolumeRequest struct {
	StartDate *time.Time `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	EndDate   *time.Time `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
}

func (m *QueryTxVolumeRequest) Reset()         { *m = QueryTxVolumeRequest{} }
func (m *QueryTxVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxVolumeRequest) ProtoMessage()    {}
func (*QueryTxVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{10}
}
func (m *QueryTxVolumeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxVolumeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxVolumeRequest.Merge(m, src)
}
func (m *QueryTxVolumeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxVolumeRequest proto.InternalMessageInfo

func (m *QueryTxVolumeRequest) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *QueryTxVolumeRequest) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// QueryAvgTxFeeResponse is response type for the Query/TxVolume RPC method.
type QueryTxVolumeResponse struct {
	TxVolumePerDay []TxVolumePerDay `protobuf:"bytes,1,rep,name=tx_volume_per_day,json=txVolumePerDay,proto3" json:"tx_volume_per_day"`
}

func (m *QueryTxVolumeResponse) Reset()         { *m = QueryTxVolumeResponse{} }
func (m *QueryTxVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxVolumeResponse) ProtoMessage()    {}
func (*QueryTxVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{11}
}
func (m *QueryTxVolumeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxVolumeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxVolumeResponse.Merge(m, src)
}
func (m *QueryTxVolumeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxVolumeResponse proto.InternalMessageInfo

func (m *QueryTxVolumeResponse) GetTxVolumePerDay() []TxVolumePerDay {
	if m != nil {
		return m.TxVolumePerDay
	}
	return nil
}

// QueryTopValidatorsRequest is request type for the Query/TopValidators RPC method.
type QueryTopValidatorsRequest struct {
	StartDate  *time.Time         `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	EndDate    *time.Time         `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Desc       bool               `protobuf:"varint,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *QueryTopValidatorsRequest) Reset()         { *m = QueryTopValidatorsRequest{} }
func (m *QueryTopValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopValidatorsRequest) ProtoMessage()    {}
func (*QueryTopValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{12}
}
func (m *QueryTopValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopValidatorsRequest.Merge(m, src)
}
func (m *QueryTopValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopValidatorsRequest proto.InternalMessageInfo

func (m *QueryTopValidatorsRequest) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *QueryTopValidatorsRequest) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *QueryTopValidatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryTopValidatorsRequest) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

// QueryTopValidatorsResponse is response type for the Query/TopValidators RPC method.
type QueryTopValidatorsResponse struct {
	TopValidators []ValidatorBlockStats `protobuf:"bytes,1,rep,name=top_validators,json=topValidators,proto3" json:"top_validators"`
	Pagination    *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTopValidatorsResponse) Reset()         { *m = QueryTopValidatorsResponse{} }
func (m *QueryTopValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopValidatorsResponse) ProtoMessage()    {}
func (*QueryTopValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{13}
}
func (m *QueryTopValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopValidatorsResponse.Merge(m, src)
}
func (m *QueryTopValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopValidatorsResponse proto.InternalMessageInfo

func (m *QueryTopValidatorsResponse) GetTopValidators() []ValidatorBlockStats {
	if m != nil {
		return m.TopValidators
	}
	return nil
}

func (m *QueryTopValidatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryValidatorBlocksRequest is request type for the Query/ValidatorBlocks RPC method.
type QueryValidatorBlocksRequest struct {
	ValidatorAddress string             `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Pagination       *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Desc             bool               `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *QueryValidatorBlocksRequest) Reset()         { *m = QueryValidatorBlocksRequest{} }
func (m *QueryValidatorBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorBlocksRequest) ProtoMessage()    {}
func (*QueryValidatorBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{14}
}
func (m *QueryValidatorBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorBlocksRequest.Merge(m, src)
}
func (m *QueryValidatorBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorBlocksRequest proto.InternalMessageInfo

func (m *QueryValidatorBlocksRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *QueryValidatorBlocksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryValidatorBlocksRequest) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

// QueryValidatorBlocksResponse is response type for the Query/ValidatorBlocks RPC method.
type QueryValidatorBlocksResponse struct {
	Blocks     []ValidatorBlock    `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryValidatorBlocksResponse) Reset()         { *m = QueryValidatorBlocksResponse{} }
func (m *QueryValidatorBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorBlocksResponse) ProtoMessage()    {}
func (*QueryValidatorBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{15}
}
func (m *QueryValidatorBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorBlocksResponse.Merge(m, src)
}
func (m *QueryValidatorBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorBlocksResponse proto.InternalMessageInfo

func (m *QueryValidatorBlocksResponse) GetBlocks() []ValidatorBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *QueryValidatorBlocksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryValidatorByConsAddrRequest struct {
	ConsensusAddress string `protobuf:"bytes,1,opt,name=consensus_address,json=consensusAddress,proto3" json:"consensus_address,omitempty"`
}

func (m *QueryValidatorByConsAddrRequest) Reset()         { *m = QueryValidatorByConsAddrRequest{} }
func (m *QueryValidatorByConsAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorByConsAddrRequest) ProtoMessage()    {}
func (*QueryValidatorByConsAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{16}
}
func (m *QueryValidatorByConsAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorByConsAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorByConsAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorByConsAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorByConsAddrRequest.Merge(m, src)
}
func (m *QueryValidatorByConsAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorByConsAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorByConsAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorByConsAddrRequest proto.InternalMessageInfo

func (m *QueryValidatorByConsAddrRequest) GetConsensusAddress() string {
	if m != nil {
		return m.ConsensusAddress
	}
	return ""
}

type QueryValidatorByConsAddrResponse struct {
	Validator github_com_cosmos_cosmos_sdk_x_staking_types.Validator `protobuf:"bytes,1,opt,name=validator,proto3,casttype=github.com/cosmos/cosmos-sdk/x/staking/types.Validator" json:"validator"`
}

func (m *QueryValidatorByConsAddrResponse) Reset()         { *m = QueryValidatorByConsAddrResponse{} }
func (m *QueryValidatorByConsAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorByConsAddrResponse) ProtoMessage()    {}
func (*QueryValidatorByConsAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4346fb254048dbbd, []int{17}
}
func (m *QueryValidatorByConsAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorByConsAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorByConsAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorByConsAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorByConsAddrResponse.Merge(m, src)
}
func (m *QueryValidatorByConsAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorByConsAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorByConsAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorByConsAddrResponse proto.InternalMessageInfo

func (m *QueryValidatorByConsAddrResponse) GetValidator() github_com_cosmos_cosmos_sdk_x_staking_types.Validator {
	if m != nil {
		return m.Validator
	}
	return github_com_cosmos_cosmos_sdk_x_staking_types.Validator{}
}

func init() {
	proto.RegisterType((*QueryTopBalancesRequest)(nil), "telemetry.QueryTopBalancesRequest")
	proto.RegisterType((*QueryTopBalancesResponse)(nil), "telemetry.QueryTopBalancesResponse")
	proto.RegisterType((*QueryExtendedValidatorsRequest)(nil), "telemetry.QueryExtendedValidatorsRequest")
	proto.RegisterType((*QueryExtendedValidatorsResponse)(nil), "telemetry.QueryExtendedValidatorsResponse")
	proto.RegisterType((*QueryAvgBlockSizeRequest)(nil), "telemetry.QueryAvgBlockSizeRequest")
	proto.RegisterType((*QueryAvgBlockSizeResponse)(nil), "telemetry.QueryAvgBlockSizeResponse")
	proto.RegisterType((*QueryAvgBlockTimeRequest)(nil), "telemetry.QueryAvgBlockTimeRequest")
	proto.RegisterType((*QueryAvgBlockTimeResponse)(nil), "telemetry.QueryAvgBlockTimeResponse")
	proto.RegisterType((*QueryAvgTxFeeRequest)(nil), "telemetry.QueryAvgTxFeeRequest")
	proto.RegisterType((*QueryAvgTxFeeResponse)(nil), "telemetry.QueryAvgTxFeeResponse")
	proto.RegisterType((*QueryTxVolumeRequest)(nil), "telemetry.QueryTxVolumeRequest")
	proto.RegisterType((*QueryTxVolumeResponse)(nil), "telemetry.QueryTxVolumeResponse")
	proto.RegisterType((*QueryTopValidatorsRequest)(nil), "telemetry.QueryTopValidatorsRequest")
	proto.RegisterType((*QueryTopValidatorsResponse)(nil), "telemetry.QueryTopValidatorsResponse")
	proto.RegisterType((*QueryValidatorBlocksRequest)(nil), "telemetry.QueryValidatorBlocksRequest")
	proto.RegisterType((*QueryValidatorBlocksResponse)(nil), "telemetry.QueryValidatorBlocksResponse")
	proto.RegisterType((*QueryValidatorByConsAddrRequest)(nil), "telemetry.QueryValidatorByConsAddrRequest")
	proto.RegisterType((*QueryValidatorByConsAddrResponse)(nil), "telemetry.QueryValidatorByConsAddrResponse")
}

func init() { proto.RegisterFile("telemetry/query.proto", fileDescriptor_4346fb254048dbbd) }

var fileDescriptor_4346fb254048dbbd = []byte{
	// 1096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0xce, 0x0f, 0x92, 0x89, 0x5a, 0xe8, 0x90, 0xb6, 0xb6, 0x93, 0xae, 0x1d, 0x07,
	0xd2, 0x90, 0x2a, 0xbb, 0x4a, 0xf8, 0x51, 0x71, 0x00, 0x14, 0x27, 0x14, 0xf1, 0x43, 0x71, 0x30,
	0x56, 0x0f, 0x70, 0x58, 0x8d, 0x77, 0xa7, 0xdb, 0x55, 0xec, 0x9d, 0xed, 0xce, 0xd8, 0xd8, 0xe5,
	0xa7, 0xb8, 0x70, 0xe0, 0x52, 0xa9, 0x57, 0x0e, 0x3d, 0x71, 0xe3, 0xc2, 0x5f, 0x91, 0x63, 0x11,
	0x97, 0x9e, 0x52, 0x94, 0xf0, 0x57, 0x20, 0x21, 0xa1, 0x9d, 0x9d, 0xfd, 0xe1, 0xf5, 0x9a, 0x04,
	0x48, 0xd4, 0x9c, 0xe2, 0xdd, 0x79, 0xf3, 0xde, 0xf7, 0x7d, 0xde, 0xbc, 0x9d, 0x17, 0x78, 0x99,
	0x93, 0x16, 0x69, 0x13, 0xee, 0xf5, 0xb5, 0x7b, 0x1d, 0xe2, 0xf5, 0x55, 0xd7, 0xa3, 0x9c, 0xa2,
	0x99, 0xe8, 0x75, 0x71, 0xce, 0xa2, 0x16, 0x15, 0x6f, 0x35, 0xff, 0x57, 0x60, 0x50, 0x5c, 0xb0,
	0x28, 0xb5, 0x5a, 0x44, 0xc3, 0xae, 0xad, 0x61, 0xc7, 0xa1, 0x1c, 0x73, 0x9b, 0x3a, 0x4c, 0xae,
	0x2a, 0x06, 0x65, 0x6d, 0xca, 0xb4, 0x26, 0x66, 0x44, 0xeb, 0xae, 0x37, 0x09, 0xc7, 0xeb, 0x9a,
	0x41, 0x6d, 0x47, 0xae, 0x2f, 0x66, 0xad, 0x37, 0x71, 0x0b, 0x3b, 0x06, 0x91, 0x26, 0xab, 0x49,
	0x13, 0x21, 0x2d, 0x32, 0x74, 0xb1, 0x65, 0x3b, 0x22, 0x9e, 0xb4, 0x2d, 0x49, 0x31, 0xe2, 0xa9,
	0xd9, 0xb9, 0xa3, 0x71, 0xbb, 0x4d, 0x18, 0xc7, 0x6d, 0x57, 0x1a, 0x14, 0xe2, 0x2c, 0xa3, 0x5f,
	0x72, 0x69, 0x29, 0x4b, 0x4a, 0x17, 0xb7, 0x6c, 0x13, 0x73, 0xea, 0x05, 0x46, 0x95, 0x1f, 0x00,
	0xbc, 0xfa, 0xb1, 0xaf, 0xa1, 0x41, 0xdd, 0x6a, 0x20, 0x93, 0xd5, 0xc9, 0xbd, 0x0e, 0x61, 0x1c,
	0xcd, 0xc1, 0x49, 0x93, 0x38, 0xb4, 0x9d, 0x07, 0x65, 0xb0, 0x32, 0x53, 0x0f, 0x1e, 0xd0, 0x2d,
	0x08, 0x63, 0x99, 0xf9, 0x5c, 0x19, 0xac, 0xcc, 0x6e, 0x2c, 0xab, 0x41, 0x2c, 0xd5, 0x8f, 0xa5,
	0x06, 0xb8, 0x65, 0x44, 0x75, 0x17, 0x5b, 0x44, 0x7a, 0xac, 0x27, 0x76, 0x22, 0x04, 0x27, 0x4c,
	0xc2, 0x8c, 0xfc, 0x78, 0x19, 0xac, 0x4c, 0xd7, 0xc5, 0xef, 0xca, 0x13, 0x00, 0xf3, 0xc3, 0x6a,
	0x98, 0x4b, 0x1d, 0x46, 0x10, 0x83, 0xd3, 0x12, 0x24, 0xcb, 0x83, 0xf2, 0xf8, 0xca, 0xec, 0xc6,
	0xc2, 0x40, 0xd8, 0x30, 0xa0, 0xdc, 0x58, 0x7d, 0x73, 0xff, 0xa0, 0x34, 0xf6, 0xe7, 0x41, 0x69,
	0xdd, 0xb2, 0xf9, 0xdd, 0x4e, 0x53, 0x35, 0x68, 0x5b, 0x93, 0x48, 0x82, 0x3f, 0x6b, 0xcc, 0xdc,
	0xd3, 0x7a, 0x5a, 0x13, 0x3b, 0x7b, 0x1a, 0xef, 0xbb, 0x84, 0x85, 0x5b, 0xeb, 0x51, 0x20, 0xf4,
	0x5e, 0x46, 0xb6, 0xd7, 0x8f, 0xcd, 0x36, 0x50, 0x9c, 0x4c, 0xb7, 0xf2, 0x2d, 0x80, 0x8a, 0x48,
	0xed, 0xdd, 0x1e, 0x27, 0x8e, 0x49, 0xcc, 0xdb, 0x61, 0x25, 0x22, 0xde, 0x57, 0xe0, 0x14, 0xe3,
	0x98, 0x77, 0x98, 0x04, 0x2e, 0x9f, 0x4e, 0x8b, 0x78, 0xe5, 0x69, 0x0e, 0x96, 0x46, 0x4a, 0x90,
	0x90, 0xbf, 0x86, 0x30, 0x3a, 0x22, 0x21, 0x66, 0x25, 0x13, 0x73, 0xb4, 0xb9, 0xfa, 0xb6, 0x04,
	0xfd, 0xc6, 0x31, 0xa0, 0x19, 0xc7, 0x7b, 0xb6, 0x63, 0x49, 0xd6, 0xd1, 0xfe, 0x7a, 0x22, 0xe2,
	0x40, 0x91, 0x73, 0xcf, 0xa6, 0xc8, 0xe3, 0xff, 0xbd, 0xc8, 0x8f, 0xc2, 0xf3, 0xbb, 0xd9, 0xb5,
	0xaa, 0x2d, 0x6a, 0xec, 0x7d, 0x62, 0xdf, 0x0f, 0x4b, 0x81, 0xb6, 0x20, 0x64, 0x1c, 0x7b, 0x5c,
	0x37, 0x31, 0x27, 0xa2, 0xc4, 0xb3, 0x1b, 0x45, 0x35, 0x68, 0x70, 0x35, 0x6c, 0x70, 0xb5, 0x11,
	0x36, 0x78, 0x75, 0x7a, 0xff, 0xa0, 0x04, 0x1e, 0x3c, 0x2d, 0x81, 0xfa, 0x8c, 0xd8, 0xb7, 0x8d,
	0x39, 0x41, 0xef, 0xc0, 0x69, 0xe2, 0x98, 0x81, 0x8b, 0xdc, 0xbf, 0x70, 0xf1, 0x1c, 0x71, 0x4c,
	0xdf, 0x41, 0xa5, 0x07, 0x0b, 0x19, 0x0a, 0x65, 0xf5, 0x3f, 0x83, 0x57, 0x70, 0xd7, 0xd2, 0x9b,
	0xfe, 0x82, 0xce, 0xec, 0xfb, 0x44, 0x77, 0x89, 0xa7, 0x9b, 0xb8, 0x2f, 0x4f, 0xc2, 0xa2, 0x1a,
	0x7f, 0x64, 0x36, 0xbb, 0xc4, 0xc3, 0x16, 0x89, 0x9c, 0xec, 0x12, 0x6f, 0x1b, 0xf7, 0xab, 0x13,
	0x7e, 0x41, 0xea, 0x08, 0x27, 0xdc, 0x07, 0x2b, 0xc3, 0x70, 0x7c, 0x9d, 0xe7, 0x1b, 0x4e, 0xa0,
	0x30, 0x0b, 0x8e, 0xff, 0x1d, 0x3e, 0x21, 0x1c, 0xdf, 0x49, 0x36, 0x9c, 0x78, 0xa5, 0xf2, 0x23,
	0x80, 0x73, 0x61, 0xe8, 0x46, 0xef, 0x16, 0x39, 0x67, 0x60, 0xee, 0xc2, 0xcb, 0x29, 0x75, 0x12,
	0x4a, 0x0d, 0xfa, 0xd9, 0xe8, 0xbc, 0xa7, 0xdf, 0x21, 0x69, 0x20, 0xd7, 0x86, 0x81, 0x88, 0xcd,
	0x03, 0x30, 0x2e, 0x62, 0xe9, 0x32, 0x0d, 0xa2, 0xd1, 0xbb, 0x4d, 0x5b, 0x9d, 0xf3, 0x76, 0x42,
	0x0c, 0x09, 0x22, 0x56, 0x27, 0x41, 0x7c, 0x00, 0x2f, 0xf1, 0x9e, 0xde, 0x15, 0x2f, 0x53, 0x1c,
	0x0a, 0x09, 0x0e, 0xe1, 0xbe, 0x41, 0x06, 0x7c, 0xe0, 0x6d, 0xe5, 0x2f, 0x20, 0xcf, 0x61, 0x83,
	0xba, 0xc3, 0xd7, 0xc4, 0xb9, 0x00, 0x91, 0xba, 0x94, 0xc6, 0xff, 0xf7, 0x18, 0x30, 0x91, 0x18,
	0x03, 0x7e, 0x01, 0xb0, 0x98, 0x95, 0xbf, 0x44, 0xfd, 0x21, 0xbc, 0xc8, 0xa9, 0xab, 0x67, 0xdc,
	0x53, 0x31, 0xe7, 0xf8, 0x76, 0x12, 0x5f, 0x21, 0x8e, 0x39, 0x93, 0xb0, 0x2f, 0xf0, 0xa4, 0xd3,
	0xd3, 0xbb, 0xe0, 0x7f, 0x02, 0x70, 0x5e, 0x88, 0x1e, 0x0c, 0x1d, 0x95, 0xed, 0x06, 0xbc, 0x14,
	0x29, 0xd6, 0xb1, 0x69, 0x7a, 0x84, 0x85, 0x17, 0xfd, 0x0b, 0xd1, 0xc2, 0x66, 0xf0, 0xfe, 0x4c,
	0x87, 0xac, 0x47, 0x00, 0x2e, 0x64, 0x0b, 0x95, 0x7c, 0x6f, 0xc2, 0x29, 0xf1, 0x91, 0x63, 0x19,
	0xe7, 0x77, 0x70, 0x8f, 0x44, 0x2a, 0xcd, 0x4f, 0x8f, 0xe5, 0x8e, 0x1c, 0x54, 0xe2, 0x68, 0xfd,
	0x2d, 0xea, 0x30, 0x9f, 0x4e, 0x02, 0xa7, 0xe1, 0xef, 0x73, 0x58, 0x87, 0xa5, 0x71, 0x46, 0x0b,
	0x12, 0xa7, 0x9f, 0x72, 0x79, 0xb4, 0x43, 0x99, 0xf6, 0x97, 0x70, 0x26, 0xaa, 0x83, 0x6c, 0xab,
	0xb3, 0x9e, 0x7c, 0xe2, 0x80, 0x1b, 0xbf, 0x4e, 0xc2, 0x49, 0x21, 0x11, 0x7d, 0x0e, 0x67, 0x13,
	0xe3, 0x2f, 0xaa, 0x24, 0xe8, 0x8f, 0x98, 0xd4, 0x8b, 0x4b, 0xff, 0x68, 0x13, 0xe4, 0x57, 0x29,
	0x7d, 0xf7, 0xdb, 0x1f, 0x0f, 0x73, 0x05, 0x74, 0x55, 0x4b, 0xfc, 0xcf, 0x40, 0x5d, 0x3d, 0x1a,
	0x83, 0x1e, 0x02, 0x88, 0x86, 0x47, 0x43, 0xf4, 0x4a, 0xda, 0xf9, 0xc8, 0x09, 0xb6, 0xb8, 0x7a,
	0x12, 0x53, 0x29, 0x67, 0x59, 0xc8, 0x29, 0x23, 0x25, 0x21, 0x27, 0x6e, 0xe9, 0x58, 0xd5, 0x37,
	0xf0, 0xc2, 0xc0, 0x67, 0x00, 0xbd, 0x94, 0x91, 0xec, 0xb0, 0x94, 0x97, 0x8f, 0xb1, 0x92, 0x2a,
	0x16, 0x85, 0x8a, 0x79, 0x54, 0x48, 0x41, 0x49, 0x8c, 0xa4, 0xdf, 0x03, 0xf8, 0x7c, 0xaa, 0x55,
	0xd0, 0x72, 0xda, 0x7b, 0x76, 0xd3, 0x17, 0xaf, 0x1f, 0x6b, 0x27, 0x75, 0x2c, 0x09, 0x1d, 0xd7,
	0xd0, 0x7c, 0x16, 0x0d, 0x5d, 0xf6, 0xd7, 0xcf, 0x00, 0xbe, 0x98, 0x71, 0x82, 0xd1, 0xea, 0xe8,
	0x28, 0xe9, 0xbe, 0x29, 0xde, 0x38, 0x91, 0xad, 0x54, 0xf5, 0x96, 0x50, 0x75, 0x13, 0xbd, 0x9e,
	0xad, 0xaa, 0xaf, 0xfb, 0x9d, 0x26, 0xba, 0x4f, 0xfb, 0x62, 0xa8, 0x1b, 0xbf, 0xaa, 0xee, 0xec,
	0x1f, 0x2a, 0xe0, 0xf1, 0xa1, 0x02, 0x7e, 0x3f, 0x54, 0xc0, 0x83, 0x23, 0x65, 0xec, 0xf1, 0x91,
	0x32, 0xf6, 0xe4, 0x48, 0x19, 0xfb, 0xf4, 0xb5, 0x44, 0xc3, 0xd4, 0xb6, 0xdf, 0xdf, 0x59, 0xdb,
	0xad, 0xd7, 0x1a, 0xb5, 0xad, 0xda, 0x47, 0x1a, 0x35, 0x6d, 0x67, 0xcd, 0xa0, 0x1e, 0xd1, 0x7a,
	0xc9, 0x92, 0xf8, 0x8d, 0xd3, 0x9c, 0x12, 0x57, 0xd3, 0xab, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x5a, 0xfa, 0xf8, 0xcd, 0xdb, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TopBalances returns all the system balances for specific denom.
	TopBalances(ctx context.Context, in *QueryTopBalancesRequest, opts ...grpc.CallOption) (*QueryTopBalancesResponse, error)
	// ExtendedValidators returns validators balances.
	ExtendedValidators(ctx context.Context, in *QueryExtendedValidatorsRequest, opts ...grpc.CallOption) (*QueryExtendedValidatorsResponse, error)
	// TopValidators returns validators blocks and stake percentage.
	TopValidators(ctx context.Context, in *QueryTopValidatorsRequest, opts ...grpc.CallOption) (*QueryTopValidatorsResponse, error)
	// ValidatorBlocks returns validator approved blocks.
	ValidatorBlocks(ctx context.Context, in *QueryValidatorBlocksRequest, opts ...grpc.CallOption) (*QueryValidatorBlocksResponse, error)
	ValidatorByConsAddr(ctx context.Context, in *QueryValidatorByConsAddrRequest, opts ...grpc.CallOption) (*QueryValidatorByConsAddrResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TopBalances(ctx context.Context, in *QueryTopBalancesRequest, opts ...grpc.CallOption) (*QueryTopBalancesResponse, error) {
	out := new(QueryTopBalancesResponse)
	err := c.cc.Invoke(ctx, "/telemetry.Query/TopBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExtendedValidators(ctx context.Context, in *QueryExtendedValidatorsRequest, opts ...grpc.CallOption) (*QueryExtendedValidatorsResponse, error) {
	out := new(QueryExtendedValidatorsResponse)
	err := c.cc.Invoke(ctx, "/telemetry.Query/ExtendedValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopValidators(ctx context.Context, in *QueryTopValidatorsRequest, opts ...grpc.CallOption) (*QueryTopValidatorsResponse, error) {
	out := new(QueryTopValidatorsResponse)
	err := c.cc.Invoke(ctx, "/telemetry.Query/TopValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorBlocks(ctx context.Context, in *QueryValidatorBlocksRequest, opts ...grpc.CallOption) (*QueryValidatorBlocksResponse, error) {
	out := new(QueryValidatorBlocksResponse)
	err := c.cc.Invoke(ctx, "/telemetry.Query/ValidatorBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorByConsAddr(ctx context.Context, in *QueryValidatorByConsAddrRequest, opts ...grpc.CallOption) (*QueryValidatorByConsAddrResponse, error) {
	out := new(QueryValidatorByConsAddrResponse)
	err := c.cc.Invoke(ctx, "/telemetry.Query/ValidatorByConsAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TopBalances returns all the system balances for specific denom.
	TopBalances(context.Context, *QueryTopBalancesRequest) (*QueryTopBalancesResponse, error)
	// ExtendedValidators returns validators balances.
	ExtendedValidators(context.Context, *QueryExtendedValidatorsRequest) (*QueryExtendedValidatorsResponse, error)
	// TopValidators returns validators blocks and stake percentage.
	TopValidators(context.Context, *QueryTopValidatorsRequest) (*QueryTopValidatorsResponse, error)
	// ValidatorBlocks returns validator approved blocks.
	ValidatorBlocks(context.Context, *QueryValidatorBlocksRequest) (*QueryValidatorBlocksResponse, error)
	ValidatorByConsAddr(context.Context, *QueryValidatorByConsAddrRequest) (*QueryValidatorByConsAddrResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TopBalances(ctx context.Context, req *QueryTopBalancesRequest) (*QueryTopBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopBalances not implemented")
}
func (*UnimplementedQueryServer) ExtendedValidators(ctx context.Context, req *QueryExtendedValidatorsRequest) (*QueryExtendedValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendedValidators not implemented")
}
func (*UnimplementedQueryServer) TopValidators(ctx context.Context, req *QueryTopValidatorsRequest) (*QueryTopValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopValidators not implemented")
}
func (*UnimplementedQueryServer) ValidatorBlocks(ctx context.Context, req *QueryValidatorBlocksRequest) (*QueryValidatorBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorBlocks not implemented")
}
func (*UnimplementedQueryServer) ValidatorByConsAddr(ctx context.Context, req *QueryValidatorByConsAddrRequest) (*QueryValidatorByConsAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorByConsAddr not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TopBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.Query/TopBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopBalances(ctx, req.(*QueryTopBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExtendedValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExtendedValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.Query/ExtendedValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExtendedValidators(ctx, req.(*QueryExtendedValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.Query/TopValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopValidators(ctx, req.(*QueryTopValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.Query/ValidatorBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorBlocks(ctx, req.(*QueryValidatorBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorByConsAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorByConsAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorByConsAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.Query/ValidatorByConsAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorByConsAddr(ctx, req.(*QueryValidatorByConsAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopBalances",
			Handler:    _Query_TopBalances_Handler,
		},
		{
			MethodName: "ExtendedValidators",
			Handler:    _Query_ExtendedValidators_Handler,
		},
		{
			MethodName: "TopValidators",
			Handler:    _Query_TopValidators_Handler,
		},
		{
			MethodName: "ValidatorBlocks",
			Handler:    _Query_ValidatorBlocks_Handler,
		},
		{
			MethodName: "ValidatorByConsAddr",
			Handler:    _Query_ValidatorByConsAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telemetry/query.proto",
}

func (m *QueryTopBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Desc {
		i--
		if m.Desc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvgBlockSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvgBlockSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvgBlockSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintQuery(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x12
	}
	if m.StartDate != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintQuery(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvgBlockSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvgBlockSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvgBlockSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvgBlockSizePerDay) > 0 {
		for iNdEx := len(m.AvgBlockSizePerDay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AvgBlockSizePerDay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvgBlockTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvgBlockTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvgBlockTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintQuery(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x12
	}
	if m.StartDate != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintQuery(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvgBlockTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvgBlockTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvgBlockTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvgBlockTimePerDay) > 0 {
		for iNdEx := len(m.AvgBlockTimePerDay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AvgBlockTimePerDay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvgTxFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvgTxFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvgTxFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintQuery(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x12
	}
	if m.StartDate != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintQuery(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvgTxFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvgTxFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvgTxFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvgTxFeePerDay) > 0 {
		for iNdEx := len(m.AvgTxFeePerDay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AvgTxFeePerDay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxVolumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxVolumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxVolumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintQuery(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x12
	}
	if m.StartDate != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintQuery(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxVolumeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxVolumeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxVolumeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxVolumePerDay) > 0 {
		for iNdEx := len(m.TxVolumePerDay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxVolumePerDay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Desc {
		i--
		if m.Desc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EndDate != nil {
		n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate):])
		if err14 != nil {
			return 0, err14
		}
		i -= n14
		i = encodeVarintQuery(dAtA, i, uint64(n14))
		i--
		dAtA[i] = 0x12
	}
	if m.StartDate != nil {
		n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate):])
		if err15 != nil {
			return 0, err15
		}
		i -= n15
		i = encodeVarintQuery(dAtA, i, uint64(n15))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TopValidators) > 0 {
		for iNdEx := len(m.TopValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorBlocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Desc {
		i--
		if m.Desc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorByConsAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorByConsAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorByConsAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsensusAddress) > 0 {
		i -= len(m.ConsensusAddress)
		copy(dAtA[i:], m.ConsensusAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsensusAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorByConsAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorByConsAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorByConsAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTopBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Desc {
		n += 2
	}
	return n
}

func (m *QueryTopBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAvgBlockSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAvgBlockSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AvgBlockSizePerDay) > 0 {
		for _, e := range m.AvgBlockSizePerDay {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAvgBlockTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAvgBlockTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AvgBlockTimePerDay) > 0 {
		for _, e := range m.AvgBlockTimePerDay {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAvgTxFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAvgTxFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AvgTxFeePerDay) > 0 {
		for _, e := range m.AvgTxFeePerDay {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTxVolumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTxVolumeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxVolumePerDay) > 0 {
		for _, e := range m.TxVolumePerDay {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTopValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Desc {
		n += 2
	}
	return n
}

func (m *QueryTopValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopValidators) > 0 {
		for _, e := range m.TopValidators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Desc {
		n += 2
	}
	return n
}

func (m *QueryValidatorBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorByConsAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsensusAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorByConsAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTopBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, github_com_cosmos_cosmos_sdk_x_bank_types.Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, github_com_cosmos_cosmos_sdk_x_staking_types.Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, github_com_cosmos_cosmos_sdk_x_bank_types.Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvgBlockSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvgBlockSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvgBlockSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvgBlockSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvgBlockSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvgBlockSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgBlockSizePerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgBlockSizePerDay = append(m.AvgBlockSizePerDay, AverageBlockSizePerDay{})
			if err := m.AvgBlockSizePerDay[len(m.AvgBlockSizePerDay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvgBlockTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvgBlockTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvgBlockTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvgBlockTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvgBlockTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvgBlockTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgBlockTimePerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgBlockTimePerDay = append(m.AvgBlockTimePerDay, AverageBlockTimePerDay{})
			if err := m.AvgBlockTimePerDay[len(m.AvgBlockTimePerDay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvgTxFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvgTxFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvgTxFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvgTxFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvgTxFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvgTxFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgTxFeePerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgTxFeePerDay = append(m.AvgTxFeePerDay, AverageTxFeePerDay{})
			if err := m.AvgTxFeePerDay[len(m.AvgTxFeePerDay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxVolumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxVolumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxVolumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxVolumeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxVolumeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxVolumeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxVolumePerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxVolumePerDay = append(m.TxVolumePerDay, TxVolumePerDay{})
			if err := m.TxVolumePerDay[len(m.TxVolumePerDay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopValidators = append(m.TopValidators, ValidatorBlockStats{})
			if err := m.TopValidators[len(m.TopValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, ValidatorBlock{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorByConsAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorByConsAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorByConsAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorByConsAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorByConsAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorByConsAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
