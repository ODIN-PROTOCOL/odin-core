// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry/telemetry.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AverageBlockSizePerDay represents average block size per day.
type AverageBlockSizePerDay struct {
	Date  time.Time `protobuf:"bytes,1,opt,name=date,proto3,stdtime" json:"date"`
	Bytes uint64    `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *AverageBlockSizePerDay) Reset()         { *m = AverageBlockSizePerDay{} }
func (m *AverageBlockSizePerDay) String() string { return proto.CompactTextString(m) }
func (*AverageBlockSizePerDay) ProtoMessage()    {}
func (*AverageBlockSizePerDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_83397851ec684947, []int{0}
}
func (m *AverageBlockSizePerDay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AverageBlockSizePerDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AverageBlockSizePerDay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AverageBlockSizePerDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AverageBlockSizePerDay.Merge(m, src)
}
func (m *AverageBlockSizePerDay) XXX_Size() int {
	return m.Size()
}
func (m *AverageBlockSizePerDay) XXX_DiscardUnknown() {
	xxx_messageInfo_AverageBlockSizePerDay.DiscardUnknown(m)
}

var xxx_messageInfo_AverageBlockSizePerDay proto.InternalMessageInfo

func (m *AverageBlockSizePerDay) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

func (m *AverageBlockSizePerDay) GetBytes() uint64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

// AverageBlockTimePerDay represents average block time per day.
type AverageBlockTimePerDay struct {
	Date    time.Time `protobuf:"bytes,1,opt,name=date,proto3,stdtime" json:"date"`
	Seconds uint64    `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (m *AverageBlockTimePerDay) Reset()         { *m = AverageBlockTimePerDay{} }
func (m *AverageBlockTimePerDay) String() string { return proto.CompactTextString(m) }
func (*AverageBlockTimePerDay) ProtoMessage()    {}
func (*AverageBlockTimePerDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_83397851ec684947, []int{1}
}
func (m *AverageBlockTimePerDay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AverageBlockTimePerDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AverageBlockTimePerDay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AverageBlockTimePerDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AverageBlockTimePerDay.Merge(m, src)
}
func (m *AverageBlockTimePerDay) XXX_Size() int {
	return m.Size()
}
func (m *AverageBlockTimePerDay) XXX_DiscardUnknown() {
	xxx_messageInfo_AverageBlockTimePerDay.DiscardUnknown(m)
}

var xxx_messageInfo_AverageBlockTimePerDay proto.InternalMessageInfo

func (m *AverageBlockTimePerDay) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

func (m *AverageBlockTimePerDay) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

// AverageTxFeePerDay represents average transaction fee per day.
type AverageTxFeePerDay struct {
	Date time.Time                                `protobuf:"bytes,1,opt,name=date,proto3,stdtime" json:"date"`
	Fee  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=fee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee"`
}

func (m *AverageTxFeePerDay) Reset()         { *m = AverageTxFeePerDay{} }
func (m *AverageTxFeePerDay) String() string { return proto.CompactTextString(m) }
func (*AverageTxFeePerDay) ProtoMessage()    {}
func (*AverageTxFeePerDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_83397851ec684947, []int{2}
}
func (m *AverageTxFeePerDay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AverageTxFeePerDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AverageTxFeePerDay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AverageTxFeePerDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AverageTxFeePerDay.Merge(m, src)
}
func (m *AverageTxFeePerDay) XXX_Size() int {
	return m.Size()
}
func (m *AverageTxFeePerDay) XXX_DiscardUnknown() {
	xxx_messageInfo_AverageTxFeePerDay.DiscardUnknown(m)
}

var xxx_messageInfo_AverageTxFeePerDay proto.InternalMessageInfo

func (m *AverageTxFeePerDay) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

func (m *AverageTxFeePerDay) GetFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fee
	}
	return nil
}

// TxVolumePerDay represents count of transactions per day.
type TxVolumePerDay struct {
	Date   time.Time `protobuf:"bytes,1,opt,name=date,proto3,stdtime" json:"date"`
	Volume uint64    `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *TxVolumePerDay) Reset()         { *m = TxVolumePerDay{} }
func (m *TxVolumePerDay) String() string { return proto.CompactTextString(m) }
func (*TxVolumePerDay) ProtoMessage()    {}
func (*TxVolumePerDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_83397851ec684947, []int{3}
}
func (m *TxVolumePerDay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxVolumePerDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxVolumePerDay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxVolumePerDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxVolumePerDay.Merge(m, src)
}
func (m *TxVolumePerDay) XXX_Size() int {
	return m.Size()
}
func (m *TxVolumePerDay) XXX_DiscardUnknown() {
	xxx_messageInfo_TxVolumePerDay.DiscardUnknown(m)
}

var xxx_messageInfo_TxVolumePerDay proto.InternalMessageInfo

func (m *TxVolumePerDay) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

func (m *TxVolumePerDay) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

// ValidatorBlockStats represents validators blocks and stake percentage.
type ValidatorBlockStats struct {
	ValidatorAddress string                                 `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	BlocksCount      uint64                                 `protobuf:"varint,2,opt,name=blocks_count,json=blocksCount,proto3" json:"blocks_count,omitempty"`
	StakePercentage  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=stake_percentage,json=stakePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stake_percentage"`
}

func (m *ValidatorBlockStats) Reset()         { *m = ValidatorBlockStats{} }
func (m *ValidatorBlockStats) String() string { return proto.CompactTextString(m) }
func (*ValidatorBlockStats) ProtoMessage()    {}
func (*ValidatorBlockStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_83397851ec684947, []int{4}
}
func (m *ValidatorBlockStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBlockStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBlockStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBlockStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBlockStats.Merge(m, src)
}
func (m *ValidatorBlockStats) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBlockStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBlockStats.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBlockStats proto.InternalMessageInfo

func (m *ValidatorBlockStats) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *ValidatorBlockStats) GetBlocksCount() uint64 {
	if m != nil {
		return m.BlocksCount
	}
	return 0
}

// ValidatorBlock represents block approved by validator.
type ValidatorBlock struct {
	Height   uint64                                   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Time     time.Time                                `protobuf:"bytes,2,opt,name=time,proto3,stdtime" json:"time"`
	TxsCount uint64                                   `protobuf:"varint,3,opt,name=txs_count,json=txsCount,proto3" json:"txs_count,omitempty"`
	Reward   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward"`
}

func (m *ValidatorBlock) Reset()         { *m = ValidatorBlock{} }
func (m *ValidatorBlock) String() string { return proto.CompactTextString(m) }
func (*ValidatorBlock) ProtoMessage()    {}
func (*ValidatorBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_83397851ec684947, []int{5}
}
func (m *ValidatorBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBlock.Merge(m, src)
}
func (m *ValidatorBlock) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBlock proto.InternalMessageInfo

func (m *ValidatorBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ValidatorBlock) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *ValidatorBlock) GetTxsCount() uint64 {
	if m != nil {
		return m.TxsCount
	}
	return 0
}

func (m *ValidatorBlock) GetReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Reward
	}
	return nil
}

func init() {
	proto.RegisterType((*AverageBlockSizePerDay)(nil), "telemetry.AverageBlockSizePerDay")
	proto.RegisterType((*AverageBlockTimePerDay)(nil), "telemetry.AverageBlockTimePerDay")
	proto.RegisterType((*AverageTxFeePerDay)(nil), "telemetry.AverageTxFeePerDay")
	proto.RegisterType((*TxVolumePerDay)(nil), "telemetry.TxVolumePerDay")
	proto.RegisterType((*ValidatorBlockStats)(nil), "telemetry.ValidatorBlockStats")
	proto.RegisterType((*ValidatorBlock)(nil), "telemetry.ValidatorBlock")
}

func init() { proto.RegisterFile("telemetry/telemetry.proto", fileDescriptor_83397851ec684947) }

var fileDescriptor_83397851ec684947 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6a, 0xdb, 0x4a,
	0x14, 0xb5, 0x62, 0x3f, 0xbf, 0x78, 0x5c, 0xd2, 0x54, 0x0d, 0x41, 0x76, 0x41, 0x72, 0xb3, 0x28,
	0x86, 0x62, 0x4d, 0x93, 0x76, 0x51, 0xba, 0x8b, 0x6d, 0x0a, 0x85, 0x12, 0x1b, 0xd5, 0x04, 0x5a,
	0x28, 0x66, 0x24, 0xdd, 0xc8, 0xc2, 0xb6, 0xc6, 0xcc, 0x8c, 0x5d, 0xbb, 0x5f, 0x91, 0x4f, 0xe8,
	0xba, 0xdb, 0xfe, 0x43, 0xc9, 0x32, 0xcb, 0xd2, 0x45, 0x52, 0xec, 0x4d, 0xe9, 0x57, 0x94, 0x19,
	0x8d, 0x4c, 0xd2, 0x55, 0x20, 0x59, 0x69, 0xee, 0x99, 0xb9, 0xe7, 0xdc, 0x73, 0x34, 0x12, 0xaa,
	0x08, 0x18, 0xc1, 0x18, 0x04, 0x5b, 0xe0, 0xf5, 0xca, 0x9d, 0x30, 0x2a, 0xa8, 0x59, 0x5a, 0x03,
	0xd5, 0x9d, 0x88, 0x46, 0x54, 0xa1, 0x58, 0xae, 0xd2, 0x03, 0x55, 0x27, 0xa2, 0x34, 0x1a, 0x01,
	0x56, 0x95, 0x3f, 0x3d, 0xc1, 0x22, 0x1e, 0x03, 0x17, 0x64, 0x3c, 0xd1, 0x07, 0x2a, 0xff, 0x1e,
	0x20, 0x89, 0x26, 0xaf, 0xda, 0x01, 0xe5, 0x63, 0xca, 0xb1, 0x4f, 0x38, 0xe0, 0xd9, 0xbe, 0x0f,
	0x82, 0xec, 0xe3, 0x80, 0xc6, 0x49, 0xba, 0xbf, 0x97, 0xa0, 0xdd, 0xc3, 0x19, 0x30, 0x12, 0x41,
	0x73, 0x44, 0x83, 0xe1, 0xbb, 0xf8, 0x33, 0x74, 0x81, 0xb5, 0xc9, 0xc2, 0x7c, 0x89, 0x0a, 0x21,
	0x11, 0x60, 0x19, 0x35, 0xa3, 0x5e, 0x3e, 0xa8, 0xba, 0xa9, 0x86, 0x9b, 0x69, 0xb8, 0xbd, 0x6c,
	0x88, 0xe6, 0xe6, 0xd9, 0x85, 0x93, 0x3b, 0xbd, 0x74, 0x0c, 0x4f, 0x75, 0x98, 0x3b, 0xe8, 0x3f,
	0x7f, 0x21, 0x80, 0x5b, 0x1b, 0x35, 0xa3, 0x5e, 0xf0, 0xd2, 0xe2, 0x55, 0xe1, 0xf7, 0x17, 0xc7,
	0xd8, 0x63, 0xd7, 0xf5, 0x24, 0xc9, 0xad, 0xf5, 0x2c, 0xf4, 0x3f, 0x87, 0x80, 0x26, 0x61, 0xa6,
	0x98, 0x95, 0x5a, 0xf3, 0x9b, 0x81, 0x4c, 0x2d, 0xda, 0x9b, 0xbf, 0x86, 0xdb, 0x0b, 0x7e, 0x44,
	0xf9, 0x13, 0x00, 0x6b, 0xa3, 0x96, 0xaf, 0x97, 0x0f, 0x2a, 0x6e, 0x1a, 0xb1, 0x2b, 0x23, 0x76,
	0x75, 0xc4, 0x6e, 0x8b, 0xc6, 0x49, 0xf3, 0x99, 0xec, 0xfb, 0x7a, 0xe9, 0xd4, 0xa3, 0x58, 0x0c,
	0xa6, 0xbe, 0x1b, 0xd0, 0x31, 0xd6, 0xef, 0x23, 0x7d, 0x34, 0x78, 0x38, 0xc4, 0x62, 0x31, 0x01,
	0xae, 0x1a, 0xb8, 0x27, 0x79, 0xf5, 0xd4, 0x03, 0xb4, 0xd5, 0x9b, 0x1f, 0xd3, 0xd1, 0xf4, 0x0e,
	0x12, 0xda, 0x45, 0xc5, 0x99, 0x62, 0xd2, 0x01, 0xe9, 0x4a, 0x2b, 0x7d, 0x37, 0xd0, 0xc3, 0x63,
	0x32, 0x8a, 0x43, 0x22, 0x28, 0x4b, 0xaf, 0x81, 0x20, 0x82, 0x9b, 0x4f, 0xd1, 0x83, 0x59, 0x06,
	0xf7, 0x49, 0x18, 0x32, 0xe0, 0x5c, 0x89, 0x97, 0xbc, 0xed, 0xf5, 0xc6, 0x61, 0x8a, 0x9b, 0x8f,
	0xd1, 0x3d, 0x5f, 0xb6, 0xf2, 0x7e, 0x40, 0xa7, 0x89, 0xd0, 0x42, 0xe5, 0x14, 0x6b, 0x49, 0xc8,
	0x7c, 0x8f, 0xb6, 0xb9, 0x20, 0x43, 0xe8, 0x4f, 0x80, 0x05, 0x90, 0x08, 0x12, 0x81, 0x95, 0x97,
	0x74, 0x4d, 0x57, 0xce, 0xfb, 0xf3, 0xc2, 0x79, 0x72, 0x83, 0xa0, 0xda, 0x10, 0x78, 0xf7, 0x15,
	0x4f, 0x77, 0x4d, 0xa3, 0x8d, 0xfc, 0x31, 0xd0, 0xd6, 0x75, 0x23, 0xd2, 0xf9, 0x00, 0xe2, 0x68,
	0x20, 0xd4, 0xe0, 0x05, 0x4f, 0x57, 0x32, 0x4b, 0xf9, 0x15, 0xa9, 0x31, 0x6f, 0x9c, 0xa5, 0xec,
	0x30, 0x1f, 0xa1, 0x92, 0x98, 0x67, 0x2e, 0xf3, 0x8a, 0x74, 0x53, 0xcc, 0xb5, 0xc5, 0x00, 0x15,
	0x19, 0x7c, 0x22, 0x2c, 0xb4, 0x0a, 0x77, 0x7f, 0x39, 0x34, 0x75, 0x6a, 0xb6, 0x79, 0x74, 0xb6,
	0xb4, 0x8d, 0xf3, 0xa5, 0x6d, 0xfc, 0x5a, 0xda, 0xc6, 0xe9, 0xca, 0xce, 0x9d, 0xaf, 0xec, 0xdc,
	0x8f, 0x95, 0x9d, 0xfb, 0xf0, 0xe2, 0x0a, 0x63, 0xa7, 0xfd, 0xe6, 0xa8, 0xd1, 0xf5, 0x3a, 0xbd,
	0x4e, 0xab, 0xf3, 0x16, 0xd3, 0x30, 0x4e, 0x1a, 0x01, 0x65, 0x80, 0xe7, 0xf8, 0xca, 0x0f, 0x49,
	0x6a, 0xf8, 0x45, 0xe5, 0xfd, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x3e, 0x64, 0xba,
	0xaa, 0x04, 0x00, 0x00,
}

func (this *AverageBlockSizePerDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AverageBlockSizePerDay)
	if !ok {
		that2, ok := that.(AverageBlockSizePerDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Date.Equal(that1.Date) {
		return false
	}
	if this.Bytes != that1.Bytes {
		return false
	}
	return true
}
func (this *AverageBlockTimePerDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AverageBlockTimePerDay)
	if !ok {
		that2, ok := that.(AverageBlockTimePerDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Date.Equal(that1.Date) {
		return false
	}
	if this.Seconds != that1.Seconds {
		return false
	}
	return true
}
func (this *AverageTxFeePerDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AverageTxFeePerDay)
	if !ok {
		that2, ok := that.(AverageTxFeePerDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Date.Equal(that1.Date) {
		return false
	}
	if len(this.Fee) != len(that1.Fee) {
		return false
	}
	for i := range this.Fee {
		if !this.Fee[i].Equal(&that1.Fee[i]) {
			return false
		}
	}
	return true
}
func (this *TxVolumePerDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxVolumePerDay)
	if !ok {
		that2, ok := that.(TxVolumePerDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Date.Equal(that1.Date) {
		return false
	}
	if this.Volume != that1.Volume {
		return false
	}
	return true
}
func (this *ValidatorBlockStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorBlockStats)
	if !ok {
		that2, ok := that.(ValidatorBlockStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ValidatorAddress != that1.ValidatorAddress {
		return false
	}
	if this.BlocksCount != that1.BlocksCount {
		return false
	}
	if !this.StakePercentage.Equal(that1.StakePercentage) {
		return false
	}
	return true
}
func (this *ValidatorBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorBlock)
	if !ok {
		that2, ok := that.(ValidatorBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if this.TxsCount != that1.TxsCount {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if !this.Reward[i].Equal(&that1.Reward[i]) {
			return false
		}
	}
	return true
}
func (m *AverageBlockSizePerDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AverageBlockSizePerDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AverageBlockSizePerDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bytes != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTelemetry(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AverageBlockTimePerDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AverageBlockTimePerDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AverageBlockTimePerDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seconds != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Seconds))
		i--
		dAtA[i] = 0x10
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTelemetry(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AverageTxFeePerDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AverageTxFeePerDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AverageTxFeePerDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fee) > 0 {
		for iNdEx := len(m.Fee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTelemetry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTelemetry(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TxVolumePerDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxVolumePerDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxVolumePerDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Volume != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Volume))
		i--
		dAtA[i] = 0x10
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTelemetry(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ValidatorBlockStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBlockStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorBlockStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.StakePercentage.Size()
		i -= size
		if _, err := m.StakePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTelemetry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.BlocksCount != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.BlocksCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTelemetry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TxsCount != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.TxsCount))
		i--
		dAtA[i] = 0x18
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintTelemetry(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if m.Height != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	offset -= sovTelemetry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AverageBlockSizePerDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovTelemetry(uint64(l))
	if m.Bytes != 0 {
		n += 1 + sovTelemetry(uint64(m.Bytes))
	}
	return n
}

func (m *AverageBlockTimePerDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovTelemetry(uint64(l))
	if m.Seconds != 0 {
		n += 1 + sovTelemetry(uint64(m.Seconds))
	}
	return n
}

func (m *AverageTxFeePerDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovTelemetry(uint64(l))
	if len(m.Fee) > 0 {
		for _, e := range m.Fee {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *TxVolumePerDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovTelemetry(uint64(l))
	if m.Volume != 0 {
		n += 1 + sovTelemetry(uint64(m.Volume))
	}
	return n
}

func (m *ValidatorBlockStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.BlocksCount != 0 {
		n += 1 + sovTelemetry(uint64(m.BlocksCount))
	}
	l = m.StakePercentage.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *ValidatorBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTelemetry(uint64(m.Height))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovTelemetry(uint64(l))
	if m.TxsCount != 0 {
		n += 1 + sovTelemetry(uint64(m.TxsCount))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func sovTelemetry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AverageBlockSizePerDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AverageBlockSizePerDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AverageBlockSizePerDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AverageBlockTimePerDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AverageBlockTimePerDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AverageBlockTimePerDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AverageTxFeePerDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AverageTxFeePerDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AverageTxFeePerDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = append(m.Fee, types.Coin{})
			if err := m.Fee[len(m.Fee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxVolumePerDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxVolumePerDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxVolumePerDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorBlockStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorBlockStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorBlockStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksCount", wireType)
			}
			m.BlocksCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsCount", wireType)
			}
			m.TxsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types.Coin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTelemetry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTelemetry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTelemetry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTelemetry = fmt.Errorf("proto: unexpected end of group")
)
