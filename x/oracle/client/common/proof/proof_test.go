package proof

import (
	"encoding/hex"
	"testing"

	oracletypes "github.com/ODIN-PROTOCOL/odin-core/x/oracle/types"
	"github.com/stretchr/testify/require"
	"github.com/tendermint/tendermint/crypto/tmhash"
)

func hexToBytes(hexstr string) []byte {
	b, err := hex.DecodeString(hexstr)
	if err != nil {
		panic(err)
	}
	return b
}

func leafHash(item []byte) []byte {
	// leaf prefix is 0
	return tmhash.Sum(append([]byte{0}, item...))
}

func innerHash(left, right []byte) []byte {
	// branch prefix is 1
	return tmhash.Sum(append([]byte{1}, append(left, right...)...))
}

func TestEncodeRelay(t *testing.T) {
	block := BlockRelayProof{
		MultiStoreProof: MultiStoreProof{
			AuthToIbcTransferStoresMerkleHash: hexToBytes("7FA9321529B99458C89F4B1B1626B2C2C04C41EB0E47FCBD2FBA7EA78B9D65D7"),
			MintStoreMerkleHash:               hexToBytes("AE7F0418BCE8C09D2C33B981A6EA261BA330C75D88DC1637A452BCC65C5AE8C1"),
			OracleIAVLStateHash:               hexToBytes("98FCDC7C08F480BE7A8268A07B8635333D902847EC0EA5606F33D43A2E936C0E"),
			ParamsToSlashStoresMerkleHash:     hexToBytes("E0004F2B2DDAB5F19E2027F8CDE6CBE7FC2A0B7BFA2EF48BB614F8591113CBF0"),
			StakingToUpgradeStoresMerkleHash:  hexToBytes("EF14C7E1F5EDCD25AB616E394B6ED8961F66ED2BC363607B50FCF3BA2760C6F8"),
		},
		BlockHeaderMerkleParts: BlockHeaderMerkleParts{
			VersionAndChainIdHash:             hexToBytes("E2082320A69AC962782E931075D14B13CD98F3E7FC5D8580D4EB60FBC0D622D5"),
			Height:                            180356,
			TimeSecond:                        1621412443,
			TimeNanoSecond:                    922160838,
			LastBlockIdAndOther:               hexToBytes("4021DC4D787B5F0842D8F14EA4C87BDF2AAB95F201036D4A3E0EF1E9D2E7816B"),
			NextValidatorHashAndConsensusHash: hexToBytes("025E8953C93B0A8B399568160FFE8B29FC5394CAF235B07EC41DF1391ACF1A35"),
			LastResultsHash:                   hexToBytes("68BD2057602D88D956B166F2FC88D1B6E18CE4846CCA241558FBBD0062DC6344"),
			EvidenceAndProposerHash:           hexToBytes("23198513920C899234DA2518EDF1D35109AEB9BE637BAA272A0D94DB5530745A"),
		},
		Signatures: []TMSignature{
			{
				R:                hexToBytes("6916405D52FF02EC26DD78E831E0A179C89B99CBBDB15C9DA802B75A7621D5EB"),
				S:                hexToBytes("69CF40BE7AC1AA176B13BA4D57EB2B8735A5832014F0DC168EA6F580C51BB222"),
				V:                28,
				SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
				SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610F0FFAEEB02321362616E642D6C616F7A692D746573746E657431"),
			},
			{
				R:                hexToBytes("6A8E3C35DEED991D257BCA9451360BFBE7978D388AF8D2F864A6919FE1083C7E"),
				S:                hexToBytes("14D145DD6BC1A770ACBDF37DAC08DD8076AB888FDA2739BE9B9767B23A387D1E"),
				V:                27,
				SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
				SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610DAEB8D9C03321362616E642D6C616F7A692D746573746E657431"),
			},
			{
				R:                hexToBytes("EB402F4B863A1DF91E7772D9574640EFFC5447ECEC6EDF6F1CFE2C33D7DC8DD4"),
				S:                hexToBytes("1FEC45523E885DD6E8AD75EA2D81D30657267DF646406240F206A98749EBD0A7"),
				V:                27,
				SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
				SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610B68FD4E702321362616E642D6C616F7A692D746573746E657431"),
			},
			{
				R:                hexToBytes("973E1ABD15911EE980A07134ED0B2B4A385DC8452C9B9CA0EF68753BBC3A8B41"),
				S:                hexToBytes("1162B263FD33A768D735259F4E526BB8925EE2F358D0E11398F6846820DD3794"),
				V:                28,
				SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
				SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610A8A7D29703321362616E642D6C616F7A692D746573746E657431"),
			},
			{
				R:                hexToBytes("BEBC360C5F7C083816242284CEF4F773B6008B24520873A223C6B92DC2EB2C79"),
				S:                hexToBytes("1560A97D7A5E5C36D0752091E547B0C78D772F879B4C70097473A715D79A4BB1"),
				V:                28,
				SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
				SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610B5F19C9B03321362616E642D6C616F7A692D746573746E657431"),
			},
			{
				R:                hexToBytes("466E1FA63CA22CE84E7361CC62A7AA68D4794603CE2DDE1D7B3F7011DF197D0B"),
				S:                hexToBytes("3840C9699974B8254B4EE36DFC0A8ADA1DFB456DC1A503EA26AE5AA28D4FEE97"),
				V:                27,
				SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
				SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610B7D0A48C03321362616E642D6C616F7A692D746573746E657431"),
			},
			{
				R:                hexToBytes("8C1127B1B5D62D34ED4996483D05295FA2A7C89FFA45C27E30389F9C4D0B7551"),
				S:                hexToBytes("229D547381600A6A9721A14783846CB3A171BD2A9F8FBCC625D2D12D30DE5682"),
				V:                27,
				SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
				SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610D7D3E1C302321362616E642D6C616F7A692D746573746E657431"),
			},
		},
	}
	result, err := block.encodeToEthData()
	require.Nil(t, err)
	expect := hexToBytes
	require.Equal(t, expect, result)
}

func TestEncodeVerify(t *testing.T) {
	data := OracleDataProof{
		Version: 180,
		Result: oracletypes.Result{
			ClientID:       "odin",
			OracleScriptID: 33,
			Calldata:       hexToBytes("0000000000000064"),
			AskCount:       16,
			MinCount:       16,
			RequestID:      8,
			AnsCount:       16,
			RequestTime:    1620919803,
			ResolveTime:    1620919816,
			ResolveStatus:  1,
			Result:         hexToBytes("00000000000eb9e6"),
		},
		MerklePaths: []IAVLMerklePath{
			{
				IsDataOnRight:  false,
				SubtreeHeight:  1,
				SubtreeSize:    2,
				SubtreeVersion: 436,
				SiblingHash:    hexToBytes("6763EDF42C0D7A3765E8CD9B970AE0E20DC6D3CF5DF0DC63CAD2C85FAFC6A803"),
			},
			{
				true,
				2,
				4,
				439,
				hexToBytes("92F33601466769D62670A58771C8F8F2695E7142B3852197DD3CA6825B8A3B26"),
			},
			{
				false,
				3,
				8,
				584,
				hexToBytes("52C4B25043FF760DB4AE3F341E830908004D1E7C3BBDF724BC71DC24AA685134"),
			},
			{
				false,
				4,
				16,
				109145,
				hexToBytes("C0924EFCFAF77E4FF65E9F24ED0C43C7BBBBB070CC111C4A58DA2B66B1189E74"),
			},
			{
				false,
				5,
				27,
				109322,
				hexToBytes("569ACC5C7BEDAC07E451AAD4B4CB48DF825CD037C91C7C0CF603AAF0D7155AD3"),
			},
			{
				false,
				6,
				52,
				110627,
				hexToBytes("89694161E84261D528B985F1849C270E0681C1DE563D542FF874CE4A8CAA43CF"),
			},
			{
				false,
				7,
				109,
				111293,
				hexToBytes("392042302D9CC79062009B614CB5739C8227EE47A2B1BD436ED7A01B41301866"),
			},
			{
				false,
				8,
				230,
				111754,
				hexToBytes("61BC16DC6CDEF5D20366DB07EB29D328DCFA0D6541E7B09A6715F2DE9D097914"),
			},
			{
				false,
				9,
				455,
				113511,
				hexToBytes("1A124B743448781F0109B55992D7128ADB4FBF1B927A010C5892D111AABF092D"),
			},
			{
				false,
				10,
				930,
				114685,
				hexToBytes("960E433B68E3EC45E8268B3448EA8B2DE941091B469F3C048400B00749E937F6"),
			},
			{
				false,
				11,
				1828,
				117352,
				hexToBytes("4EA48E7EF80E4BFA96BD7DDEC1EA697290D417CFEF0CE1301E6947D80DC0ACC3"),
			},
			{
				true,
				12,
				2648,
				180355,
				hexToBytes("B869D5BEF3B85633E8BA9267F547B3ED8EF81EDAE59E7AD90BADEE9F60C77B79"),
			},
			{
				false,
				13,
				6454,
				180355,
				hexToBytes("536A9E5ADAA62E4123A7946C070C4659E601C764F1DD8344AE32DDD2F0C0EBA3"),
			},
			{
				false,
				14,
				14115,
				180355,
				hexToBytes("1EDC57F4B1F78F2D6550C2AE198E718904037AD8B8CF99A35145DF7627E63660"),
			},
			{
				false,
				15,
				29214,
				180355,
				hexToBytes("88A43418A7D2F7928431A8C3F22CDA3EF9CB97DB616F798D7CF1F3D473E8684E"),
			},
			{
				false,
				16,
				51135,
				180355,
				hexToBytes("B9ECBDD9167EEFA0A342167F456FF6BE6FA9C56B6AB265C42CECD2837FBA7F63"),
			},
		},
	}

	result, err := data.encodeToEthData(180356)
	require.Nil(t, err)
	expect := hexToBytes("000000000000000000000000000000000000000000000000000000000002C084000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000B400000000000000000000000000000000000000000000000000000000000002A00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000001A0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000609D45FB00000000000000000000000000000000000000000000000000000000609D4608000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001E000000000000000000000000000000000000000000000000000000000000000046F64696E0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000EB9E6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001B46763EDF42C0D7A3765E8CD9B970AE0E20DC6D3CF5DF0DC63CAD2C85FAFC6A80300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001B792F33601466769D62670A58771C8F8F2695E7142B3852197DD3CA6825B8A3B26000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000024852C4B25043FF760DB4AE3F341E830908004D1E7C3BBDF724BC71DC24AA685134000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001AA59C0924EFCFAF77E4FF65E9F24ED0C43C7BBBBB070CC111C4A58DA2B66B1189E7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000001B000000000000000000000000000000000000000000000000000000000001AB0A569ACC5C7BEDAC07E451AAD4B4CB48DF825CD037C91C7C0CF603AAF0D7155AD3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000001B02389694161E84261D528B985F1849C270E0681C1DE563D542FF874CE4A8CAA43CF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000006D000000000000000000000000000000000000000000000000000000000001B2BD392042302D9CC79062009B614CB5739C8227EE47A2B1BD436ED7A01B413018660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000E6000000000000000000000000000000000000000000000000000000000001B48A61BC16DC6CDEF5D20366DB07EB29D328DCFA0D6541E7B09A6715F2DE9D0979140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000001C7000000000000000000000000000000000000000000000000000000000001BB671A124B743448781F0109B55992D7128ADB4FBF1B927A010C5892D111AABF092D0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000A00000000000000000000000000000000000000000000000000000000000003A2000000000000000000000000000000000000000000000000000000000001BFFD960E433B68E3EC45E8268B3448EA8B2DE941091B469F3C048400B00749E937F60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B0000000000000000000000000000000000000000000000000000000000000724000000000000000000000000000000000000000000000000000000000001CA684EA48E7EF80E4BFA96BD7DDEC1EA697290D417CFEF0CE1301E6947D80DC0ACC30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000C0000000000000000000000000000000000000000000000000000000000000A58000000000000000000000000000000000000000000000000000000000002C083B869D5BEF3B85633E8BA9267F547B3ED8EF81EDAE59E7AD90BADEE9F60C77B790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000D0000000000000000000000000000000000000000000000000000000000001936000000000000000000000000000000000000000000000000000000000002C083536A9E5ADAA62E4123A7946C070C4659E601C764F1DD8344AE32DDD2F0C0EBA30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E0000000000000000000000000000000000000000000000000000000000003723000000000000000000000000000000000000000000000000000000000002C0831EDC57F4B1F78F2D6550C2AE198E718904037AD8B8CF99A35145DF7627E636600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F000000000000000000000000000000000000000000000000000000000000721E000000000000000000000000000000000000000000000000000000000002C08388A43418A7D2F7928431A8C3F22CDA3EF9CB97DB616F798D7CF1F3D473E8684E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000C7BF000000000000000000000000000000000000000000000000000000000002C083B9ECBDD9167EEFA0A342167F456FF6BE6FA9C56B6AB265C42CECD2837FBA7F63")
	require.Equal(t, expect, result)
}

func TestEncodeVerifyCount(t *testing.T) {
	data := RequestsCountProof{
		Count:   83745,
		Version: 381475,
		MerklePaths: []IAVLMerklePath{
			{
				IsDataOnRight:  true,
				SubtreeHeight:  1,
				SubtreeSize:    2,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("CC2B205F83C84F62241A772240146DAC1074B34D0ACF7BD4F40FE8EB6091E16A"),
			},
			{
				IsDataOnRight:  true,
				SubtreeHeight:  2,
				SubtreeSize:    4,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("44BFC48A018AC56E8D48129E5079ED9B622987291133B7C80C3FDA2C6EAC04BE"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  3,
				SubtreeSize:    6,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("C53B972DCF8FE467C341C5D7CE500D90DD07D8CF2F045BD144B895F4C066B56F"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  4,
				SubtreeSize:    14,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("41BDB65EEDC0A00378228BFA0ED216957646D67C9F45AF176E7E461057A945D3"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  5,
				SubtreeSize:    30,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("E0DA56740211A1BD2A04F6A92EE3E9AB478492E2EF7AB67CDEC9B041838BDA1F"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  7,
				SubtreeSize:    77,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("CA593556998FE6FFAE1B8A445B4F4FCEB24A48020E60E492D4CA84CD9A4802C0"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  9,
				SubtreeSize:    167,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("330CD5FC9B12B43041A3232C96021AC036D581F89B650EA29123E8571E621F37"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  11,
				SubtreeSize:    759,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("E191C394A146FC2813BB70434C16D006F3440309AB730DF51256C8A1317D8BF1"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  12,
				SubtreeSize:    2587,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("DB1783B3A93F08254B690304AAF36850FA600FD5EA82A1B76463DE73713A83C6"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  13,
				SubtreeSize:    6393,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("536A9E5ADAA62E4123A7946C070C4659E601C764F1DD8344AE32DDD2F0C0EBA3"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  14,
				SubtreeSize:    14054,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("1EDC57F4B1F78F2D6550C2AE198E718904037AD8B8CF99A35145DF7627E63660"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  15,
				SubtreeSize:    29153,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("88A43418A7D2F7928431A8C3F22CDA3EF9CB97DB616F798D7CF1F3D473E8684E"),
			},
			{
				IsDataOnRight:  false,
				SubtreeHeight:  17,
				SubtreeSize:    84504,
				SubtreeVersion: 381476,
				SiblingHash:    hexToBytes("665A6371F4DC6D0AD2D77A4022C6B2E9CC7371C20DE5D70BF4EB746601EFF4AA"),
			},
		},
	}

	result, err := data.encodeToEthData(381477)
	require.Nil(t, err)
	expect := hexToBytes("000000000000000000000000000000000000000000000000000000000005d2250000000000000000000000000000000000000000000000000000000000014721000000000000000000000000000000000000000000000000000000000005d2230000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000005d224cc2b205f83c84f62241a772240146dac1074b34d0acf7bd4f40fe8eb6091e16a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000005d22444bfc48a018ac56e8d48129e5079ed9b622987291133b7c80c3fda2c6eac04be000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000005d224c53b972dcf8fe467c341c5d7ce500d90dd07d8cf2f045bd144b895f4c066b56f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000005d22441bdb65eedc0a00378228bfa0ed216957646d67c9f45af176e7e461057a945d300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000005d224e0da56740211a1bd2a04f6a92ee3e9ab478492e2ef7ab67cdec9b041838bda1f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000004d000000000000000000000000000000000000000000000000000000000005d224ca593556998fe6ffae1b8a445b4f4fceb24a48020e60e492d4ca84cd9a4802c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000a7000000000000000000000000000000000000000000000000000000000005d224330cd5fc9b12b43041a3232c96021ac036d581f89b650ea29123e8571e621f370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000002f7000000000000000000000000000000000000000000000000000000000005d224e191c394a146fc2813bb70434c16d006f3440309ab730df51256c8a1317d8bf10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000a1b000000000000000000000000000000000000000000000000000000000005d224db1783b3a93f08254b690304aaf36850fa600fd5ea82a1b76463de73713a83c60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000018f9000000000000000000000000000000000000000000000000000000000005d224536a9e5adaa62e4123a7946c070c4659e601c764f1dd8344ae32ddd2f0c0eba30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000036e6000000000000000000000000000000000000000000000000000000000005d2241edc57f4b1f78f2d6550c2ae198e718904037ad8b8cf99a35145df7627e636600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000071e1000000000000000000000000000000000000000000000000000000000005d22488a43418a7d2f7928431a8c3f22cda3ef9cb97db616f798d7cf1f3d473e8684e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000014a18000000000000000000000000000000000000000000000000000000000005d224665a6371f4dc6d0ad2d77a4022c6b2e9cc7371c20de5d70bf4eb746601eff4aa")
	require.Equal(t, expect, result)
}
